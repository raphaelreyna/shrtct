// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUploadFilesParams creates a new UploadFilesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUploadFilesParams() *UploadFilesParams {
	return &UploadFilesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUploadFilesParamsWithTimeout creates a new UploadFilesParams object
// with the ability to set a timeout on a request.
func NewUploadFilesParamsWithTimeout(timeout time.Duration) *UploadFilesParams {
	return &UploadFilesParams{
		timeout: timeout,
	}
}

// NewUploadFilesParamsWithContext creates a new UploadFilesParams object
// with the ability to set a context for a request.
func NewUploadFilesParamsWithContext(ctx context.Context) *UploadFilesParams {
	return &UploadFilesParams{
		Context: ctx,
	}
}

// NewUploadFilesParamsWithHTTPClient creates a new UploadFilesParams object
// with the ability to set a custom HTTPClient for a request.
func NewUploadFilesParamsWithHTTPClient(client *http.Client) *UploadFilesParams {
	return &UploadFilesParams{
		HTTPClient: client,
	}
}

/* UploadFilesParams contains all the parameters to send to the API endpoint
   for the upload files operation.

   Typically these are written to a http.Request.
*/
type UploadFilesParams struct {

	/* File0.

	   A file upload. At least one is required.
	*/
	File0 runtime.NamedReadCloser

	/* File1.

	   Optional additional files.
	*/
	File1 runtime.NamedReadCloser

	/* File2.

	   Optional additional files.
	*/
	File2 runtime.NamedReadCloser

	/* File3.

	   Optional additional files.
	*/
	File3 runtime.NamedReadCloser

	/* StoryID.

	   The story ID that these files will be associated with.

	   Format: int64
	*/
	StoryID *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the upload files params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UploadFilesParams) WithDefaults() *UploadFilesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the upload files params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UploadFilesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the upload files params
func (o *UploadFilesParams) WithTimeout(timeout time.Duration) *UploadFilesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upload files params
func (o *UploadFilesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upload files params
func (o *UploadFilesParams) WithContext(ctx context.Context) *UploadFilesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upload files params
func (o *UploadFilesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upload files params
func (o *UploadFilesParams) WithHTTPClient(client *http.Client) *UploadFilesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upload files params
func (o *UploadFilesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFile0 adds the file0 to the upload files params
func (o *UploadFilesParams) WithFile0(file0 runtime.NamedReadCloser) *UploadFilesParams {
	o.SetFile0(file0)
	return o
}

// SetFile0 adds the file0 to the upload files params
func (o *UploadFilesParams) SetFile0(file0 runtime.NamedReadCloser) {
	o.File0 = file0
}

// WithFile1 adds the file1 to the upload files params
func (o *UploadFilesParams) WithFile1(file1 runtime.NamedReadCloser) *UploadFilesParams {
	o.SetFile1(file1)
	return o
}

// SetFile1 adds the file1 to the upload files params
func (o *UploadFilesParams) SetFile1(file1 runtime.NamedReadCloser) {
	o.File1 = file1
}

// WithFile2 adds the file2 to the upload files params
func (o *UploadFilesParams) WithFile2(file2 runtime.NamedReadCloser) *UploadFilesParams {
	o.SetFile2(file2)
	return o
}

// SetFile2 adds the file2 to the upload files params
func (o *UploadFilesParams) SetFile2(file2 runtime.NamedReadCloser) {
	o.File2 = file2
}

// WithFile3 adds the file3 to the upload files params
func (o *UploadFilesParams) WithFile3(file3 runtime.NamedReadCloser) *UploadFilesParams {
	o.SetFile3(file3)
	return o
}

// SetFile3 adds the file3 to the upload files params
func (o *UploadFilesParams) SetFile3(file3 runtime.NamedReadCloser) {
	o.File3 = file3
}

// WithStoryID adds the storyID to the upload files params
func (o *UploadFilesParams) WithStoryID(storyID *int64) *UploadFilesParams {
	o.SetStoryID(storyID)
	return o
}

// SetStoryID adds the storyId to the upload files params
func (o *UploadFilesParams) SetStoryID(storyID *int64) {
	o.StoryID = storyID
}

// WriteToRequest writes these params to a swagger request
func (o *UploadFilesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	// form file param file0
	if err := r.SetFileParam("file0", o.File0); err != nil {
		return err
	}

	if o.File1 != nil {

		if o.File1 != nil {
			// form file param file1
			if err := r.SetFileParam("file1", o.File1); err != nil {
				return err
			}
		}
	}

	if o.File2 != nil {

		if o.File2 != nil {
			// form file param file2
			if err := r.SetFileParam("file2", o.File2); err != nil {
				return err
			}
		}
	}

	if o.File3 != nil {

		if o.File3 != nil {
			// form file param file3
			if err := r.SetFileParam("file3", o.File3); err != nil {
				return err
			}
		}
	}

	if o.StoryID != nil {

		// form param story_id
		var frStoryID int64
		if o.StoryID != nil {
			frStoryID = *o.StoryID
		}
		fStoryID := swag.FormatInt64(frStoryID)
		if fStoryID != "" {
			if err := r.SetFormParam("story_id", fStoryID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
