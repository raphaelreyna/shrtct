// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/raphaelreyna/shrtct/internal/generated/models"
)

// NewUpdateCategoryParams creates a new UpdateCategoryParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateCategoryParams() *UpdateCategoryParams {
	return &UpdateCategoryParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateCategoryParamsWithTimeout creates a new UpdateCategoryParams object
// with the ability to set a timeout on a request.
func NewUpdateCategoryParamsWithTimeout(timeout time.Duration) *UpdateCategoryParams {
	return &UpdateCategoryParams{
		timeout: timeout,
	}
}

// NewUpdateCategoryParamsWithContext creates a new UpdateCategoryParams object
// with the ability to set a context for a request.
func NewUpdateCategoryParamsWithContext(ctx context.Context) *UpdateCategoryParams {
	return &UpdateCategoryParams{
		Context: ctx,
	}
}

// NewUpdateCategoryParamsWithHTTPClient creates a new UpdateCategoryParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateCategoryParamsWithHTTPClient(client *http.Client) *UpdateCategoryParams {
	return &UpdateCategoryParams{
		HTTPClient: client,
	}
}

/* UpdateCategoryParams contains all the parameters to send to the API endpoint
   for the update category operation.

   Typically these are written to a http.Request.
*/
type UpdateCategoryParams struct {

	// UpdateCategory.
	UpdateCategory *models.UpdateCategory

	/* CategoryPublicID.

	   The unique ID of the Category you wish to update.

	   Format: int64
	*/
	CategoryPublicID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update category params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateCategoryParams) WithDefaults() *UpdateCategoryParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update category params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateCategoryParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update category params
func (o *UpdateCategoryParams) WithTimeout(timeout time.Duration) *UpdateCategoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update category params
func (o *UpdateCategoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update category params
func (o *UpdateCategoryParams) WithContext(ctx context.Context) *UpdateCategoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update category params
func (o *UpdateCategoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update category params
func (o *UpdateCategoryParams) WithHTTPClient(client *http.Client) *UpdateCategoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update category params
func (o *UpdateCategoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithUpdateCategory adds the updateCategory to the update category params
func (o *UpdateCategoryParams) WithUpdateCategory(updateCategory *models.UpdateCategory) *UpdateCategoryParams {
	o.SetUpdateCategory(updateCategory)
	return o
}

// SetUpdateCategory adds the updateCategory to the update category params
func (o *UpdateCategoryParams) SetUpdateCategory(updateCategory *models.UpdateCategory) {
	o.UpdateCategory = updateCategory
}

// WithCategoryPublicID adds the categoryPublicID to the update category params
func (o *UpdateCategoryParams) WithCategoryPublicID(categoryPublicID int64) *UpdateCategoryParams {
	o.SetCategoryPublicID(categoryPublicID)
	return o
}

// SetCategoryPublicID adds the categoryPublicId to the update category params
func (o *UpdateCategoryParams) SetCategoryPublicID(categoryPublicID int64) {
	o.CategoryPublicID = categoryPublicID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateCategoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.UpdateCategory != nil {
		if err := r.SetBodyParam(o.UpdateCategory); err != nil {
			return err
		}
	}

	// path param category-public-id
	if err := r.SetPathParam("category-public-id", swag.FormatInt64(o.CategoryPublicID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
