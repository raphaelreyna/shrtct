// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCategory(params *CreateCategoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCategoryCreated, error)

	CreateEntityTemplate(params *CreateEntityTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEntityTemplateCreated, error)

	CreateEpic(params *CreateEpicParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEpicCreated, error)

	CreateEpicComment(params *CreateEpicCommentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEpicCommentCreated, error)

	CreateEpicCommentComment(params *CreateEpicCommentCommentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEpicCommentCommentCreated, error)

	CreateGroup(params *CreateGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateGroupCreated, error)

	CreateIteration(params *CreateIterationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIterationCreated, error)

	CreateLabel(params *CreateLabelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateLabelCreated, error)

	CreateLinkedFile(params *CreateLinkedFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateLinkedFileCreated, error)

	CreateMilestone(params *CreateMilestoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMilestoneCreated, error)

	CreateMultipleStories(params *CreateMultipleStoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMultipleStoriesCreated, error)

	CreateProject(params *CreateProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProjectCreated, error)

	CreateStory(params *CreateStoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateStoryCreated, error)

	CreateStoryComment(params *CreateStoryCommentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateStoryCommentCreated, error)

	CreateStoryLink(params *CreateStoryLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateStoryLinkCreated, error)

	CreateStoryReaction(params *CreateStoryReactionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateStoryReactionCreated, error)

	CreateTask(params *CreateTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTaskCreated, error)

	DeleteCategory(params *DeleteCategoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCategoryNoContent, error)

	DeleteEntityTemplate(params *DeleteEntityTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEntityTemplateNoContent, error)

	DeleteEpic(params *DeleteEpicParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEpicNoContent, error)

	DeleteEpicComment(params *DeleteEpicCommentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEpicCommentNoContent, error)

	DeleteFile(params *DeleteFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteFileNoContent, error)

	DeleteIteration(params *DeleteIterationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIterationNoContent, error)

	DeleteLabel(params *DeleteLabelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteLabelNoContent, error)

	DeleteLinkedFile(params *DeleteLinkedFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteLinkedFileNoContent, error)

	DeleteMilestone(params *DeleteMilestoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMilestoneNoContent, error)

	DeleteMultipleStories(params *DeleteMultipleStoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMultipleStoriesNoContent, error)

	DeleteProject(params *DeleteProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectNoContent, error)

	DeleteStory(params *DeleteStoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteStoryNoContent, error)

	DeleteStoryComment(params *DeleteStoryCommentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteStoryCommentNoContent, error)

	DeleteStoryLink(params *DeleteStoryLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteStoryLinkNoContent, error)

	DeleteStoryReaction(params *DeleteStoryReactionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteStoryReactionNoContent, error)

	DeleteTask(params *DeleteTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTaskNoContent, error)

	DisableGroups(params *DisableGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DisableGroupsNoContent, error)

	DisableIterations(params *DisableIterationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DisableIterationsNoContent, error)

	DisableStoryTemplates(params *DisableStoryTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DisableStoryTemplatesNoContent, error)

	EnableGroups(params *EnableGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnableGroupsNoContent, error)

	EnableIterations(params *EnableIterationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnableIterationsNoContent, error)

	EnableStoryTemplates(params *EnableStoryTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnableStoryTemplatesNoContent, error)

	GetCategory(params *GetCategoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCategoryOK, error)

	GetCurrentMemberInfo(params *GetCurrentMemberInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCurrentMemberInfoOK, error)

	GetEntityTemplate(params *GetEntityTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEntityTemplateOK, error)

	GetEpic(params *GetEpicParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEpicOK, error)

	GetEpicComment(params *GetEpicCommentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEpicCommentOK, error)

	GetEpicWorkflow(params *GetEpicWorkflowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEpicWorkflowOK, error)

	GetExternalLinkStories(params *GetExternalLinkStoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetExternalLinkStoriesOK, error)

	GetFile(params *GetFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFileOK, error)

	GetGroup(params *GetGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGroupOK, error)

	GetIteration(params *GetIterationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIterationOK, error)

	GetLabel(params *GetLabelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLabelOK, error)

	GetLinkedFile(params *GetLinkedFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLinkedFileOK, error)

	GetMember(params *GetMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMemberOK, error)

	GetMilestone(params *GetMilestoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMilestoneOK, error)

	GetProject(params *GetProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectOK, error)

	GetRepository(params *GetRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRepositoryOK, error)

	GetStory(params *GetStoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStoryOK, error)

	GetStoryComment(params *GetStoryCommentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStoryCommentOK, error)

	GetStoryLink(params *GetStoryLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStoryLinkOK, error)

	GetTask(params *GetTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskOK, error)

	GetWorkflow(params *GetWorkflowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkflowOK, error)

	ListCategories(params *ListCategoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCategoriesOK, error)

	ListCategoryMilestones(params *ListCategoryMilestonesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCategoryMilestonesOK, error)

	ListEntityTemplates(params *ListEntityTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEntityTemplatesOK, error)

	ListEpicComments(params *ListEpicCommentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEpicCommentsOK, error)

	ListEpicStories(params *ListEpicStoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEpicStoriesOK, error)

	ListEpics(params *ListEpicsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEpicsOK, error)

	ListFiles(params *ListFilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListFilesOK, error)

	ListGroupStories(params *ListGroupStoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListGroupStoriesOK, error)

	ListGroups(params *ListGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListGroupsOK, error)

	ListIterationStories(params *ListIterationStoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIterationStoriesOK, error)

	ListIterations(params *ListIterationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIterationsOK, error)

	ListLabelEpics(params *ListLabelEpicsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListLabelEpicsOK, error)

	ListLabelStories(params *ListLabelStoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListLabelStoriesOK, error)

	ListLabels(params *ListLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListLabelsOK, error)

	ListLinkedFiles(params *ListLinkedFilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListLinkedFilesOK, error)

	ListMembers(params *ListMembersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListMembersOK, error)

	ListMilestoneEpics(params *ListMilestoneEpicsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListMilestoneEpicsOK, error)

	ListMilestones(params *ListMilestonesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListMilestonesOK, error)

	ListProjects(params *ListProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectsOK, error)

	ListRepositories(params *ListRepositoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRepositoriesOK, error)

	ListStories(params *ListStoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListStoriesOK, error)

	ListWorkflows(params *ListWorkflowsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListWorkflowsOK, error)

	Search(params *SearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchOK, error)

	SearchEpics(params *SearchEpicsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchEpicsOK, error)

	SearchStories(params *SearchStoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchStoriesOK, error)

	SearchStoriesOld(params *SearchStoriesOldParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchStoriesOldCreated, error)

	StoryHistory(params *StoryHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StoryHistoryOK, error)

	UnlinkProductboardFromEpic(params *UnlinkProductboardFromEpicParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnlinkProductboardFromEpicNoContent, error)

	UpdateCategory(params *UpdateCategoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCategoryOK, error)

	UpdateEntityTemplate(params *UpdateEntityTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEntityTemplateOK, error)

	UpdateEpic(params *UpdateEpicParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEpicOK, error)

	UpdateEpicComment(params *UpdateEpicCommentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEpicCommentOK, error)

	UpdateFile(params *UpdateFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateFileOK, error)

	UpdateGroup(params *UpdateGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGroupOK, error)

	UpdateIteration(params *UpdateIterationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIterationOK, error)

	UpdateLabel(params *UpdateLabelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateLabelOK, error)

	UpdateLinkedFile(params *UpdateLinkedFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateLinkedFileOK, error)

	UpdateMilestone(params *UpdateMilestoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMilestoneOK, error)

	UpdateMultipleStories(params *UpdateMultipleStoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMultipleStoriesOK, error)

	UpdateProject(params *UpdateProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProjectOK, error)

	UpdateStory(params *UpdateStoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateStoryOK, error)

	UpdateStoryComment(params *UpdateStoryCommentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateStoryCommentOK, error)

	UpdateStoryLink(params *UpdateStoryLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateStoryLinkOK, error)

	UpdateTask(params *UpdateTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTaskOK, error)

	UploadFiles(params *UploadFilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadFilesCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateCategory creates category

  Create Category allows you to create a new Category in Shortcut.
*/
func (a *Client) CreateCategory(params *CreateCategoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCategoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCategoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createCategory",
		Method:             "POST",
		PathPattern:        "/api/v3/categories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCategoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCategoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateEntityTemplate creates entity template

  Create a new entity template for your organization.
*/
func (a *Client) CreateEntityTemplate(params *CreateEntityTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEntityTemplateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEntityTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createEntityTemplate",
		Method:             "POST",
		PathPattern:        "/api/v3/entity-templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateEntityTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateEntityTemplateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createEntityTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateEpic creates epic

  Create Epic allows you to create a new Epic in Shortcut.
*/
func (a *Client) CreateEpic(params *CreateEpicParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEpicCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEpicParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createEpic",
		Method:             "POST",
		PathPattern:        "/api/v3/epics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateEpicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateEpicCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createEpic: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateEpicComment creates epic comment

  This endpoint allows you to create a threaded Comment on an Epic.
*/
func (a *Client) CreateEpicComment(params *CreateEpicCommentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEpicCommentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEpicCommentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createEpicComment",
		Method:             "POST",
		PathPattern:        "/api/v3/epics/{epic-public-id}/comments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateEpicCommentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateEpicCommentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createEpicComment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateEpicCommentComment creates epic comment comment

  This endpoint allows you to create a nested Comment reply to an existing Epic Comment.
*/
func (a *Client) CreateEpicCommentComment(params *CreateEpicCommentCommentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEpicCommentCommentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEpicCommentCommentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createEpicCommentComment",
		Method:             "POST",
		PathPattern:        "/api/v3/epics/{epic-public-id}/comments/{comment-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateEpicCommentCommentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateEpicCommentCommentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createEpicCommentComment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateGroup creates group
*/
func (a *Client) CreateGroup(params *CreateGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createGroup",
		Method:             "POST",
		PathPattern:        "/api/v3/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateIteration creates iteration
*/
func (a *Client) CreateIteration(params *CreateIterationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIterationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIterationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createIteration",
		Method:             "POST",
		PathPattern:        "/api/v3/iterations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIterationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIterationCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createIteration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateLabel creates label

  Create Label allows you to create a new Label in Shortcut.
*/
func (a *Client) CreateLabel(params *CreateLabelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateLabelCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLabelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createLabel",
		Method:             "POST",
		PathPattern:        "/api/v3/labels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateLabelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateLabelCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createLabel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateLinkedFile creates linked file

  Create Linked File allows you to create a new Linked File in Shortcut.
*/
func (a *Client) CreateLinkedFile(params *CreateLinkedFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateLinkedFileCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLinkedFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createLinkedFile",
		Method:             "POST",
		PathPattern:        "/api/v3/linked-files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateLinkedFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateLinkedFileCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createLinkedFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateMilestone creates milestone

  Create Milestone allows you to create a new Milestone in Shortcut.
*/
func (a *Client) CreateMilestone(params *CreateMilestoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMilestoneCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMilestoneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createMilestone",
		Method:             "POST",
		PathPattern:        "/api/v3/milestones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateMilestoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMilestoneCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createMilestone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateMultipleStories creates multiple stories

  Create Multiple Stories allows you to create multiple stories in a single request using the same syntax as [Create Story](https://shortcut.com/api/#create-story).
*/
func (a *Client) CreateMultipleStories(params *CreateMultipleStoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMultipleStoriesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMultipleStoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createMultipleStories",
		Method:             "POST",
		PathPattern:        "/api/v3/stories/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateMultipleStoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMultipleStoriesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createMultipleStories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateProject creates project

  Create Project is used to create a new Shortcut Project.
*/
func (a *Client) CreateProject(params *CreateProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProjectCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createProject",
		Method:             "POST",
		PathPattern:        "/api/v3/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProjectCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateStory creates story

  Create Story is used to add a new story to your Shortcut.
*/
func (a *Client) CreateStory(params *CreateStoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateStoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createStory",
		Method:             "POST",
		PathPattern:        "/api/v3/stories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateStoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateStoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createStory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateStoryComment creates story comment

  Create Comment allows you to create a Comment on any Story.
*/
func (a *Client) CreateStoryComment(params *CreateStoryCommentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateStoryCommentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStoryCommentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createStoryComment",
		Method:             "POST",
		PathPattern:        "/api/v3/stories/{story-public-id}/comments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateStoryCommentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateStoryCommentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createStoryComment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateStoryLink creates story link

  Story Links (called Story Relationships in the UI) allow you create semantic relationships between two stories. The parameters read like an active voice grammatical sentence:  subject -> verb -> object.

The subject story acts on the object Story; the object story is the direct object of the sentence.

The subject story "blocks", "duplicates", or "relates to" the object story.  Examples:
- "story 5 blocks story 6” -- story 6 is now "blocked" until story 5 is moved to a Done workflow state.
- "story 2 duplicates story 1” -- Story 2 represents the same body of work as Story 1 (and should probably be archived).
- "story 7 relates to story 3”
*/
func (a *Client) CreateStoryLink(params *CreateStoryLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateStoryLinkCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStoryLinkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createStoryLink",
		Method:             "POST",
		PathPattern:        "/api/v3/story-links",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateStoryLinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateStoryLinkCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createStoryLink: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateStoryReaction creates story reaction

  Create a reaction to a story comment.
*/
func (a *Client) CreateStoryReaction(params *CreateStoryReactionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateStoryReactionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStoryReactionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createStoryReaction",
		Method:             "POST",
		PathPattern:        "/api/v3/stories/{story-public-id}/comments/{comment-public-id}/reactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateStoryReactionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateStoryReactionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createStoryReaction: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateTask creates task

  Create Task is used to create a new task in a Story.
*/
func (a *Client) CreateTask(params *CreateTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTaskCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createTask",
		Method:             "POST",
		PathPattern:        "/api/v3/stories/{story-public-id}/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTaskCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCategory deletes category

  Delete Category can be used to delete any Category.
*/
func (a *Client) DeleteCategory(params *DeleteCategoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCategoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCategoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteCategory",
		Method:             "DELETE",
		PathPattern:        "/api/v3/categories/{category-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCategoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCategoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteEntityTemplate deletes entity template
*/
func (a *Client) DeleteEntityTemplate(params *DeleteEntityTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEntityTemplateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEntityTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteEntityTemplate",
		Method:             "DELETE",
		PathPattern:        "/api/v3/entity-templates/{entity-template-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEntityTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEntityTemplateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteEntityTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteEpic deletes epic

  Delete Epic can be used to delete the Epic. The only required parameter is Epic ID.
*/
func (a *Client) DeleteEpic(params *DeleteEpicParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEpicNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEpicParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteEpic",
		Method:             "DELETE",
		PathPattern:        "/api/v3/epics/{epic-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEpicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEpicNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteEpic: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteEpicComment deletes epic comment

  This endpoint allows you to delete a Comment from an Epic.
*/
func (a *Client) DeleteEpicComment(params *DeleteEpicCommentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEpicCommentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEpicCommentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteEpicComment",
		Method:             "DELETE",
		PathPattern:        "/api/v3/epics/{epic-public-id}/comments/{comment-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEpicCommentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEpicCommentNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteEpicComment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteFile deletes file

  Delete File deletes a previously uploaded file.
*/
func (a *Client) DeleteFile(params *DeleteFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteFileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteFile",
		Method:             "DELETE",
		PathPattern:        "/api/v3/files/{file-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteFileNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteIteration deletes iteration
*/
func (a *Client) DeleteIteration(params *DeleteIterationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIterationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIterationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteIteration",
		Method:             "DELETE",
		PathPattern:        "/api/v3/iterations/{iteration-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIterationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIterationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteIteration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteLabel deletes label

  Delete Label can be used to delete any Label.
*/
func (a *Client) DeleteLabel(params *DeleteLabelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteLabelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLabelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteLabel",
		Method:             "DELETE",
		PathPattern:        "/api/v3/labels/{label-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLabelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLabelNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteLabel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteLinkedFile deletes linked file

  Delete Linked File can be used to delete any previously attached Linked-File.
*/
func (a *Client) DeleteLinkedFile(params *DeleteLinkedFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteLinkedFileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLinkedFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteLinkedFile",
		Method:             "DELETE",
		PathPattern:        "/api/v3/linked-files/{linked-file-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLinkedFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLinkedFileNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteLinkedFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteMilestone deletes milestone

  Delete Milestone can be used to delete any Milestone.
*/
func (a *Client) DeleteMilestone(params *DeleteMilestoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMilestoneNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMilestoneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMilestone",
		Method:             "DELETE",
		PathPattern:        "/api/v3/milestones/{milestone-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMilestoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMilestoneNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMilestone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteMultipleStories deletes multiple stories

  Delete Multiple Stories allows you to delete multiple archived stories at once.
*/
func (a *Client) DeleteMultipleStories(params *DeleteMultipleStoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMultipleStoriesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMultipleStoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMultipleStories",
		Method:             "DELETE",
		PathPattern:        "/api/v3/stories/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMultipleStoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMultipleStoriesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMultipleStories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteProject deletes project

  Delete Project can be used to delete a Project. Projects can only be deleted if all associated Stories are moved or deleted. In the case that the Project cannot be deleted, you will receive a 422 response.
*/
func (a *Client) DeleteProject(params *DeleteProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteProject",
		Method:             "DELETE",
		PathPattern:        "/api/v3/projects/{project-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteStory deletes story

  Delete Story can be used to delete any Story.
*/
func (a *Client) DeleteStory(params *DeleteStoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteStoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteStory",
		Method:             "DELETE",
		PathPattern:        "/api/v3/stories/{story-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteStoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteStoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteStory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteStoryComment deletes story comment

  Delete a Comment from any story.
*/
func (a *Client) DeleteStoryComment(params *DeleteStoryCommentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteStoryCommentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStoryCommentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteStoryComment",
		Method:             "DELETE",
		PathPattern:        "/api/v3/stories/{story-public-id}/comments/{comment-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteStoryCommentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteStoryCommentNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteStoryComment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteStoryLink deletes story link

  Removes the relationship between the stories for the given Story Link.
*/
func (a *Client) DeleteStoryLink(params *DeleteStoryLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteStoryLinkNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStoryLinkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteStoryLink",
		Method:             "DELETE",
		PathPattern:        "/api/v3/story-links/{story-link-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteStoryLinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteStoryLinkNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteStoryLink: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteStoryReaction deletes story reaction

  Delete a reaction from any story comment.
*/
func (a *Client) DeleteStoryReaction(params *DeleteStoryReactionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteStoryReactionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStoryReactionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteStoryReaction",
		Method:             "DELETE",
		PathPattern:        "/api/v3/stories/{story-public-id}/comments/{comment-public-id}/reactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteStoryReactionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteStoryReactionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteStoryReaction: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteTask deletes task

  Delete Task can be used to delete any previously created Task on a Story.
*/
func (a *Client) DeleteTask(params *DeleteTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTaskNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTask",
		Method:             "DELETE",
		PathPattern:        "/api/v3/stories/{story-public-id}/tasks/{task-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTaskNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DisableGroups disables groups

  Disables Groups for the current workspace2
*/
func (a *Client) DisableGroups(params *DisableGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DisableGroupsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisableGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "disableGroups",
		Method:             "PUT",
		PathPattern:        "/api/v3/groups/disable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DisableGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DisableGroupsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for disableGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DisableIterations disables iterations

  Disables Iterations for the current workspace
*/
func (a *Client) DisableIterations(params *DisableIterationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DisableIterationsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisableIterationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "disableIterations",
		Method:             "PUT",
		PathPattern:        "/api/v3/iterations/disable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DisableIterationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DisableIterationsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for disableIterations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DisableStoryTemplates disables story templates

  Disables the Story Template feature for the given Organization.
*/
func (a *Client) DisableStoryTemplates(params *DisableStoryTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DisableStoryTemplatesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisableStoryTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "disableStoryTemplates",
		Method:             "PUT",
		PathPattern:        "/api/v3/entity-templates/disable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DisableStoryTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DisableStoryTemplatesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for disableStoryTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EnableGroups enables groups

  Enables Groups for the current workspace2
*/
func (a *Client) EnableGroups(params *EnableGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnableGroupsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnableGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "enableGroups",
		Method:             "PUT",
		PathPattern:        "/api/v3/groups/enable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnableGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnableGroupsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enableGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EnableIterations enables iterations

  Enables Iterations for the current workspace
*/
func (a *Client) EnableIterations(params *EnableIterationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnableIterationsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnableIterationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "enableIterations",
		Method:             "PUT",
		PathPattern:        "/api/v3/iterations/enable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnableIterationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnableIterationsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enableIterations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EnableStoryTemplates enables story templates

  Enables the Story Template feature for the given Organization.
*/
func (a *Client) EnableStoryTemplates(params *EnableStoryTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnableStoryTemplatesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnableStoryTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "enableStoryTemplates",
		Method:             "PUT",
		PathPattern:        "/api/v3/entity-templates/enable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnableStoryTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnableStoryTemplatesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enableStoryTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCategory gets category

  Get Category returns information about the selected Category.
*/
func (a *Client) GetCategory(params *GetCategoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCategoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCategory",
		Method:             "GET",
		PathPattern:        "/api/v3/categories/{category-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCategoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCurrentMemberInfo gets current member info

  Returns information about the authenticated member.
*/
func (a *Client) GetCurrentMemberInfo(params *GetCurrentMemberInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCurrentMemberInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentMemberInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCurrentMemberInfo",
		Method:             "GET",
		PathPattern:        "/api/v3/member",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCurrentMemberInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCurrentMemberInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCurrentMemberInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEntityTemplate gets entity template

  Get Entity Template returns information about a given entity template.
*/
func (a *Client) GetEntityTemplate(params *GetEntityTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEntityTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEntityTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getEntityTemplate",
		Method:             "GET",
		PathPattern:        "/api/v3/entity-templates/{entity-template-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEntityTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEntityTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEntityTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEpic gets epic

  Get Epic returns information about the selected Epic.
*/
func (a *Client) GetEpic(params *GetEpicParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEpicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEpicParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getEpic",
		Method:             "GET",
		PathPattern:        "/api/v3/epics/{epic-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEpicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEpicOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEpic: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEpicComment gets epic comment

  This endpoint returns information about the selected Epic Comment.
*/
func (a *Client) GetEpicComment(params *GetEpicCommentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEpicCommentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEpicCommentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getEpicComment",
		Method:             "GET",
		PathPattern:        "/api/v3/epics/{epic-public-id}/comments/{comment-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEpicCommentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEpicCommentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEpicComment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEpicWorkflow gets epic workflow

  Get Epic Workflow returns the Epic Workflow for the organization.
*/
func (a *Client) GetEpicWorkflow(params *GetEpicWorkflowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEpicWorkflowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEpicWorkflowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getEpicWorkflow",
		Method:             "GET",
		PathPattern:        "/api/v3/epic-workflow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEpicWorkflowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEpicWorkflowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEpicWorkflow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetExternalLinkStories gets external link stories

  Get Stories which have a given External Link associated with them.
*/
func (a *Client) GetExternalLinkStories(params *GetExternalLinkStoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetExternalLinkStoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExternalLinkStoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getExternalLinkStories",
		Method:             "GET",
		PathPattern:        "/api/v3/external-link/stories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalLinkStoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExternalLinkStoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getExternalLinkStories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFile gets file

  Get File returns information about the selected UploadedFile.
*/
func (a *Client) GetFile(params *GetFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFile",
		Method:             "GET",
		PathPattern:        "/api/v3/files/{file-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGroup gets group
*/
func (a *Client) GetGroup(params *GetGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGroup",
		Method:             "GET",
		PathPattern:        "/api/v3/groups/{group-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIteration gets iteration
*/
func (a *Client) GetIteration(params *GetIterationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIterationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIterationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIteration",
		Method:             "GET",
		PathPattern:        "/api/v3/iterations/{iteration-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIterationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIterationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIteration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLabel gets label

  Get Label returns information about the selected Label.
*/
func (a *Client) GetLabel(params *GetLabelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLabelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLabelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLabel",
		Method:             "GET",
		PathPattern:        "/api/v3/labels/{label-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLabelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLabelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLabel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLinkedFile gets linked file

  Get File returns information about the selected Linked File.
*/
func (a *Client) GetLinkedFile(params *GetLinkedFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLinkedFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLinkedFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLinkedFile",
		Method:             "GET",
		PathPattern:        "/api/v3/linked-files/{linked-file-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLinkedFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLinkedFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLinkedFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMember gets member

  Returns information about a Member.
*/
func (a *Client) GetMember(params *GetMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMemberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMember",
		Method:             "GET",
		PathPattern:        "/api/v3/members/{member-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMemberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMember: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMilestone gets milestone

  Get Milestone returns information about a chosen Milestone.
*/
func (a *Client) GetMilestone(params *GetMilestoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMilestoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMilestoneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMilestone",
		Method:             "GET",
		PathPattern:        "/api/v3/milestones/{milestone-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMilestoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMilestoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMilestone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProject gets project

  Get Project returns information about the selected Project.
*/
func (a *Client) GetProject(params *GetProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProject",
		Method:             "GET",
		PathPattern:        "/api/v3/projects/{project-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepository gets repository

  Get Repository returns information about the selected Repository.
*/
func (a *Client) GetRepository(params *GetRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepository",
		Method:             "GET",
		PathPattern:        "/api/v3/repositories/{repo-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStory gets story

  Get Story returns information about a chosen Story.
*/
func (a *Client) GetStory(params *GetStoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getStory",
		Method:             "GET",
		PathPattern:        "/api/v3/stories/{story-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStoryComment gets story comment

  Get Comment is used to get Comment information.
*/
func (a *Client) GetStoryComment(params *GetStoryCommentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStoryCommentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStoryCommentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getStoryComment",
		Method:             "GET",
		PathPattern:        "/api/v3/stories/{story-public-id}/comments/{comment-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStoryCommentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStoryCommentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStoryComment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStoryLink gets story link

  Returns the stories and their relationship for the given Story Link.
*/
func (a *Client) GetStoryLink(params *GetStoryLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStoryLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStoryLinkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getStoryLink",
		Method:             "GET",
		PathPattern:        "/api/v3/story-links/{story-link-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStoryLinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStoryLinkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStoryLink: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTask gets task

  Returns information about a chosen Task.
*/
func (a *Client) GetTask(params *GetTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTask",
		Method:             "GET",
		PathPattern:        "/api/v3/stories/{story-public-id}/tasks/{task-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWorkflow gets workflow

  Get Workflow returns information about a chosen Workflow.
*/
func (a *Client) GetWorkflow(params *GetWorkflowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkflowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWorkflow",
		Method:             "GET",
		PathPattern:        "/api/v3/workflows/{workflow-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkflowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkflow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCategories lists categories

  List Categories returns a list of all Categories and their attributes.
*/
func (a *Client) ListCategories(params *ListCategoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCategoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCategoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listCategories",
		Method:             "GET",
		PathPattern:        "/api/v3/categories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCategoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCategoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCategories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCategoryMilestones lists category milestones

  List Category Milestones returns a list of all Milestones with the Category.
*/
func (a *Client) ListCategoryMilestones(params *ListCategoryMilestonesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCategoryMilestonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCategoryMilestonesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listCategoryMilestones",
		Method:             "GET",
		PathPattern:        "/api/v3/categories/{category-public-id}/milestones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCategoryMilestonesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCategoryMilestonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCategoryMilestones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListEntityTemplates lists entity templates

  List all the entity templates for an organization.
*/
func (a *Client) ListEntityTemplates(params *ListEntityTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEntityTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEntityTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listEntityTemplates",
		Method:             "GET",
		PathPattern:        "/api/v3/entity-templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListEntityTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEntityTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listEntityTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListEpicComments lists epic comments

  Get a list of all Comments on an Epic.
*/
func (a *Client) ListEpicComments(params *ListEpicCommentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEpicCommentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEpicCommentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listEpicComments",
		Method:             "GET",
		PathPattern:        "/api/v3/epics/{epic-public-id}/comments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListEpicCommentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEpicCommentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listEpicComments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListEpicStories lists epic stories

  Get a list of all Stories in an Epic.
*/
func (a *Client) ListEpicStories(params *ListEpicStoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEpicStoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEpicStoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listEpicStories",
		Method:             "GET",
		PathPattern:        "/api/v3/epics/{epic-public-id}/stories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListEpicStoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEpicStoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listEpicStories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListEpics lists epics

  List Epics returns a list of all Epics and their attributes.
*/
func (a *Client) ListEpics(params *ListEpicsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEpicsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEpicsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listEpics",
		Method:             "GET",
		PathPattern:        "/api/v3/epics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListEpicsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEpicsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listEpics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListFiles lists files

  List Files returns a list of all UploadedFiles in the workspace.
*/
func (a *Client) ListFiles(params *ListFilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListFilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listFiles",
		Method:             "GET",
		PathPattern:        "/api/v3/files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListFilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListFilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listFiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListGroupStories lists group stories

  List the Stories assigned to the Group. (By default, limited to 1,000).
*/
func (a *Client) ListGroupStories(params *ListGroupStoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListGroupStoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListGroupStoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listGroupStories",
		Method:             "GET",
		PathPattern:        "/api/v3/groups/{group-public-id}/stories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListGroupStoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListGroupStoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listGroupStories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListGroups lists groups

  A group in our API maps to a "Team" within the Shortcut Product. A Team is a collection of Users that can be associated to Stories, Epics, and Iterations within Shortcut.
*/
func (a *Client) ListGroups(params *ListGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listGroups",
		Method:             "GET",
		PathPattern:        "/api/v3/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListIterationStories lists iteration stories

  Get a list of all Stories in an Iteration.
*/
func (a *Client) ListIterationStories(params *ListIterationStoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIterationStoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIterationStoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listIterationStories",
		Method:             "GET",
		PathPattern:        "/api/v3/iterations/{iteration-public-id}/stories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListIterationStoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListIterationStoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listIterationStories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListIterations lists iterations
*/
func (a *Client) ListIterations(params *ListIterationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIterationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIterationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listIterations",
		Method:             "GET",
		PathPattern:        "/api/v3/iterations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListIterationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListIterationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listIterations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListLabelEpics lists label epics

  List all of the Epics with the Label.
*/
func (a *Client) ListLabelEpics(params *ListLabelEpicsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListLabelEpicsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListLabelEpicsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listLabelEpics",
		Method:             "GET",
		PathPattern:        "/api/v3/labels/{label-public-id}/epics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListLabelEpicsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListLabelEpicsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listLabelEpics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListLabelStories lists label stories

  List all of the Stories with the Label.
*/
func (a *Client) ListLabelStories(params *ListLabelStoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListLabelStoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListLabelStoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listLabelStories",
		Method:             "GET",
		PathPattern:        "/api/v3/labels/{label-public-id}/stories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListLabelStoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListLabelStoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listLabelStories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListLabels lists labels

  List Labels returns a list of all Labels and their attributes.
*/
func (a *Client) ListLabels(params *ListLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListLabelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listLabels",
		Method:             "GET",
		PathPattern:        "/api/v3/labels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListLabelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListLabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listLabels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListLinkedFiles lists linked files

  List Linked Files returns a list of all Linked-Files and their attributes.
*/
func (a *Client) ListLinkedFiles(params *ListLinkedFilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListLinkedFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListLinkedFilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listLinkedFiles",
		Method:             "GET",
		PathPattern:        "/api/v3/linked-files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListLinkedFilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListLinkedFilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listLinkedFiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListMembers lists members

  List Members returns information about members of the organization.
*/
func (a *Client) ListMembers(params *ListMembersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMembersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listMembers",
		Method:             "GET",
		PathPattern:        "/api/v3/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListMilestoneEpics lists milestone epics

  List all of the Epics within the Milestone.
*/
func (a *Client) ListMilestoneEpics(params *ListMilestoneEpicsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListMilestoneEpicsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMilestoneEpicsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listMilestoneEpics",
		Method:             "GET",
		PathPattern:        "/api/v3/milestones/{milestone-public-id}/epics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListMilestoneEpicsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListMilestoneEpicsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listMilestoneEpics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListMilestones lists milestones

  List Milestones returns a list of all Milestones and their attributes.
*/
func (a *Client) ListMilestones(params *ListMilestonesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListMilestonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMilestonesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listMilestones",
		Method:             "GET",
		PathPattern:        "/api/v3/milestones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListMilestonesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListMilestonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listMilestones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListProjects lists projects

  List Projects returns a list of all Projects and their attributes.
*/
func (a *Client) ListProjects(params *ListProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listProjects",
		Method:             "GET",
		PathPattern:        "/api/v3/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListProjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listProjects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListRepositories lists repositories

  List Repositories returns a list of all Repositories and their attributes.
*/
func (a *Client) ListRepositories(params *ListRepositoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRepositoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRepositoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listRepositories",
		Method:             "GET",
		PathPattern:        "/api/v3/repositories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRepositoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRepositoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listRepositories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListStories lists stories

  List Stories returns a list of all Stories in a selected Project and their attributes.
*/
func (a *Client) ListStories(params *ListStoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListStoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listStories",
		Method:             "GET",
		PathPattern:        "/api/v3/projects/{project-public-id}/stories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListStoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListStoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listStories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListWorkflows lists workflows

  List Workflows returns a list of all Workflows in the organization.
*/
func (a *Client) ListWorkflows(params *ListWorkflowsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListWorkflowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListWorkflowsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listWorkflows",
		Method:             "GET",
		PathPattern:        "/api/v3/workflows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListWorkflowsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListWorkflowsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listWorkflows: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Search searches

  Search lets you search Epics and Stories based on desired parameters. Since ordering of the results can change over time (due to search ranking decay, new Epics and Stories being created), the `next` value from the previous response can be used as the path and query string for the next page to ensure stable ordering.
*/
func (a *Client) Search(params *SearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "search",
		Method:             "GET",
		PathPattern:        "/api/v3/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchEpics searches epics

  Search Epics lets you search Epics based on desired parameters. Since ordering of stories can change over time (due to search ranking decay, new Epics being created), the `next` value from the previous response can be used as the path and query string for the next page to ensure stable ordering.
*/
func (a *Client) SearchEpics(params *SearchEpicsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchEpicsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchEpicsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchEpics",
		Method:             "GET",
		PathPattern:        "/api/v3/search/epics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchEpicsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchEpicsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchEpics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchStories searches stories

  Search Stories lets you search Stories based on desired parameters. Since ordering of stories can change over time (due to search ranking decay, new stories being created), the `next` value from the previous response can be used as the path and query string for the next page to ensure stable ordering.
*/
func (a *Client) SearchStories(params *SearchStoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchStoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchStoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchStories",
		Method:             "GET",
		PathPattern:        "/api/v3/search/stories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchStoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchStoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchStories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchStoriesOld searches stories old

  Search Stories lets you search Stories based on desired parameters.
*/
func (a *Client) SearchStoriesOld(params *SearchStoriesOldParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchStoriesOldCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchStoriesOldParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchStoriesOld",
		Method:             "POST",
		PathPattern:        "/api/v3/stories/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchStoriesOldReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchStoriesOldCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchStoriesOld: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StoryHistory stories history
*/
func (a *Client) StoryHistory(params *StoryHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StoryHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStoryHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "storyHistory",
		Method:             "GET",
		PathPattern:        "/api/v3/stories/{story-public-id}/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StoryHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StoryHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storyHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UnlinkProductboardFromEpic unlinks productboard from epic

  This endpoint allows you to unlink a productboard epic.
*/
func (a *Client) UnlinkProductboardFromEpic(params *UnlinkProductboardFromEpicParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnlinkProductboardFromEpicNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnlinkProductboardFromEpicParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "unlinkProductboardFromEpic",
		Method:             "POST",
		PathPattern:        "/api/v3/epics/{epic-public-id}/unlink-productboard",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnlinkProductboardFromEpicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnlinkProductboardFromEpicNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for unlinkProductboardFromEpic: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCategory updates category

  Update Category allows you to replace a Category name with another name. If you try to name a Category something that already exists, you will receive a 422 response.
*/
func (a *Client) UpdateCategory(params *UpdateCategoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCategoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateCategory",
		Method:             "PUT",
		PathPattern:        "/api/v3/categories/{category-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCategoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateEntityTemplate updates entity template

  Update an entity template's name or its contents.
*/
func (a *Client) UpdateEntityTemplate(params *UpdateEntityTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEntityTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEntityTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateEntityTemplate",
		Method:             "PUT",
		PathPattern:        "/api/v3/entity-templates/{entity-template-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEntityTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEntityTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateEntityTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateEpic updates epic

  Update Epic can be used to update numerous fields in the Epic. The only required parameter is Epic ID, which can be found in the Shortcut UI.
*/
func (a *Client) UpdateEpic(params *UpdateEpicParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEpicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEpicParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateEpic",
		Method:             "PUT",
		PathPattern:        "/api/v3/epics/{epic-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEpicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEpicOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateEpic: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateEpicComment updates epic comment

  This endpoint allows you to update a threaded Comment on an Epic.
*/
func (a *Client) UpdateEpicComment(params *UpdateEpicCommentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEpicCommentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEpicCommentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateEpicComment",
		Method:             "PUT",
		PathPattern:        "/api/v3/epics/{epic-public-id}/comments/{comment-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEpicCommentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEpicCommentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateEpicComment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateFile updates file

  Update File updates the properties of an UploadedFile (but not its content).
*/
func (a *Client) UpdateFile(params *UpdateFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateFile",
		Method:             "PUT",
		PathPattern:        "/api/v3/files/{file-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateGroup updates group
*/
func (a *Client) UpdateGroup(params *UpdateGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateGroup",
		Method:             "PUT",
		PathPattern:        "/api/v3/groups/{group-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateIteration updates iteration
*/
func (a *Client) UpdateIteration(params *UpdateIterationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIterationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIterationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateIteration",
		Method:             "PUT",
		PathPattern:        "/api/v3/iterations/{iteration-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateIterationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIterationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateIteration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateLabel updates label

  Update Label allows you to replace a Label name with another name. If you try to name a Label something that already exists, you will receive a 422 response.
*/
func (a *Client) UpdateLabel(params *UpdateLabelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateLabelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLabelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateLabel",
		Method:             "PUT",
		PathPattern:        "/api/v3/labels/{label-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateLabelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateLabelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateLabel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateLinkedFile updates linked file

  Updated Linked File allows you to update properties of a previously attached Linked-File.
*/
func (a *Client) UpdateLinkedFile(params *UpdateLinkedFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateLinkedFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLinkedFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateLinkedFile",
		Method:             "PUT",
		PathPattern:        "/api/v3/linked-files/{linked-file-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateLinkedFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateLinkedFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateLinkedFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateMilestone updates milestone

  Update Milestone can be used to update Milestone properties.
*/
func (a *Client) UpdateMilestone(params *UpdateMilestoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMilestoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMilestoneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMilestone",
		Method:             "PUT",
		PathPattern:        "/api/v3/milestones/{milestone-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMilestoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMilestoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateMilestone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateMultipleStories updates multiple stories

  Update Multiple Stories allows you to make changes to numerous stories at once.
*/
func (a *Client) UpdateMultipleStories(params *UpdateMultipleStoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMultipleStoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMultipleStoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMultipleStories",
		Method:             "PUT",
		PathPattern:        "/api/v3/stories/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMultipleStoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMultipleStoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateMultipleStories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateProject updates project

  Update Project can be used to change properties of a Project.
*/
func (a *Client) UpdateProject(params *UpdateProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateProject",
		Method:             "PUT",
		PathPattern:        "/api/v3/projects/{project-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateStory updates story

  Update Story can be used to update Story properties.
*/
func (a *Client) UpdateStory(params *UpdateStoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateStoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateStory",
		Method:             "PUT",
		PathPattern:        "/api/v3/stories/{story-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateStoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateStoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateStory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateStoryComment updates story comment

  Update Comment replaces the text of the existing Comment.
*/
func (a *Client) UpdateStoryComment(params *UpdateStoryCommentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateStoryCommentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStoryCommentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateStoryComment",
		Method:             "PUT",
		PathPattern:        "/api/v3/stories/{story-public-id}/comments/{comment-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateStoryCommentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateStoryCommentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateStoryComment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateStoryLink updates story link

  Updates the stories and/or the relationship for the given Story Link.
*/
func (a *Client) UpdateStoryLink(params *UpdateStoryLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateStoryLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStoryLinkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateStoryLink",
		Method:             "PUT",
		PathPattern:        "/api/v3/story-links/{story-link-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateStoryLinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateStoryLinkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateStoryLink: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateTask updates task

  Update Task can be used to update Task properties.
*/
func (a *Client) UpdateTask(params *UpdateTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateTask",
		Method:             "PUT",
		PathPattern:        "/api/v3/stories/{story-public-id}/tasks/{task-public-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UploadFiles uploads files

  Upload Files uploads one or many files and optionally associates them with a story.
   Use the multipart/form-data content-type to upload.
   Each `file` key should contain a separate file.
   Each UploadedFile's name comes from the Content-Disposition header "filename" directive for that field.
*/
func (a *Client) UploadFiles(params *UploadFilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadFilesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadFilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "uploadFiles",
		Method:             "POST",
		PathPattern:        "/api/v3/files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UploadFilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadFilesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for uploadFiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
