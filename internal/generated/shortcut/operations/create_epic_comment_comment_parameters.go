// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/raphaelreyna/shrtct/internal/generated/models"
)

// NewCreateEpicCommentCommentParams creates a new CreateEpicCommentCommentParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateEpicCommentCommentParams() *CreateEpicCommentCommentParams {
	return &CreateEpicCommentCommentParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateEpicCommentCommentParamsWithTimeout creates a new CreateEpicCommentCommentParams object
// with the ability to set a timeout on a request.
func NewCreateEpicCommentCommentParamsWithTimeout(timeout time.Duration) *CreateEpicCommentCommentParams {
	return &CreateEpicCommentCommentParams{
		timeout: timeout,
	}
}

// NewCreateEpicCommentCommentParamsWithContext creates a new CreateEpicCommentCommentParams object
// with the ability to set a context for a request.
func NewCreateEpicCommentCommentParamsWithContext(ctx context.Context) *CreateEpicCommentCommentParams {
	return &CreateEpicCommentCommentParams{
		Context: ctx,
	}
}

// NewCreateEpicCommentCommentParamsWithHTTPClient creates a new CreateEpicCommentCommentParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateEpicCommentCommentParamsWithHTTPClient(client *http.Client) *CreateEpicCommentCommentParams {
	return &CreateEpicCommentCommentParams{
		HTTPClient: client,
	}
}

/* CreateEpicCommentCommentParams contains all the parameters to send to the API endpoint
   for the create epic comment comment operation.

   Typically these are written to a http.Request.
*/
type CreateEpicCommentCommentParams struct {

	// CreateCommentComment.
	CreateCommentComment *models.CreateCommentComment

	/* CommentPublicID.

	   The ID of the parent Epic Comment.

	   Format: int64
	*/
	CommentPublicID int64

	/* EpicPublicID.

	   The ID of the associated Epic.

	   Format: int64
	*/
	EpicPublicID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create epic comment comment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateEpicCommentCommentParams) WithDefaults() *CreateEpicCommentCommentParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create epic comment comment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateEpicCommentCommentParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the create epic comment comment params
func (o *CreateEpicCommentCommentParams) WithTimeout(timeout time.Duration) *CreateEpicCommentCommentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create epic comment comment params
func (o *CreateEpicCommentCommentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create epic comment comment params
func (o *CreateEpicCommentCommentParams) WithContext(ctx context.Context) *CreateEpicCommentCommentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create epic comment comment params
func (o *CreateEpicCommentCommentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create epic comment comment params
func (o *CreateEpicCommentCommentParams) WithHTTPClient(client *http.Client) *CreateEpicCommentCommentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create epic comment comment params
func (o *CreateEpicCommentCommentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCreateCommentComment adds the createCommentComment to the create epic comment comment params
func (o *CreateEpicCommentCommentParams) WithCreateCommentComment(createCommentComment *models.CreateCommentComment) *CreateEpicCommentCommentParams {
	o.SetCreateCommentComment(createCommentComment)
	return o
}

// SetCreateCommentComment adds the createCommentComment to the create epic comment comment params
func (o *CreateEpicCommentCommentParams) SetCreateCommentComment(createCommentComment *models.CreateCommentComment) {
	o.CreateCommentComment = createCommentComment
}

// WithCommentPublicID adds the commentPublicID to the create epic comment comment params
func (o *CreateEpicCommentCommentParams) WithCommentPublicID(commentPublicID int64) *CreateEpicCommentCommentParams {
	o.SetCommentPublicID(commentPublicID)
	return o
}

// SetCommentPublicID adds the commentPublicId to the create epic comment comment params
func (o *CreateEpicCommentCommentParams) SetCommentPublicID(commentPublicID int64) {
	o.CommentPublicID = commentPublicID
}

// WithEpicPublicID adds the epicPublicID to the create epic comment comment params
func (o *CreateEpicCommentCommentParams) WithEpicPublicID(epicPublicID int64) *CreateEpicCommentCommentParams {
	o.SetEpicPublicID(epicPublicID)
	return o
}

// SetEpicPublicID adds the epicPublicId to the create epic comment comment params
func (o *CreateEpicCommentCommentParams) SetEpicPublicID(epicPublicID int64) {
	o.EpicPublicID = epicPublicID
}

// WriteToRequest writes these params to a swagger request
func (o *CreateEpicCommentCommentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.CreateCommentComment != nil {
		if err := r.SetBodyParam(o.CreateCommentComment); err != nil {
			return err
		}
	}

	// path param comment-public-id
	if err := r.SetPathParam("comment-public-id", swag.FormatInt64(o.CommentPublicID)); err != nil {
		return err
	}

	// path param epic-public-id
	if err := r.SetPathParam("epic-public-id", swag.FormatInt64(o.EpicPublicID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
