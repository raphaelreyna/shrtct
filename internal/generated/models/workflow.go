// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Workflow Workflow is the array of defined Workflow States. Workflow can be queried using the API but must be updated in the Shortcut UI.
//
// swagger:model Workflow
type Workflow struct {

	// Indicates if an owner is automatically assigned when an unowned story is started.
	// Required: true
	AutoAssignOwner *bool `json:"auto_assign_owner"`

	// The date the Workflow was created.
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// The unique ID of the default state that new Stories are entered into.
	// Required: true
	DefaultStateID *int64 `json:"default_state_id"`

	// A description of the workflow.
	// Required: true
	Description *string `json:"description"`

	// A string description of this resource.
	// Required: true
	EntityType *string `json:"entity_type"`

	// The unique ID of the Workflow.
	// Required: true
	ID *int64 `json:"id"`

	// The name of the workflow.
	// Required: true
	Name *string `json:"name"`

	// An array of IDs of projects within the Workflow.
	// Required: true
	ProjectIds []float64 `json:"project_ids"`

	// A map of the states in this Workflow.
	// Required: true
	States []*WorkflowState `json:"states"`

	// The ID of the team the workflow belongs to.
	// Required: true
	TeamID *int64 `json:"team_id"`

	// The date the Workflow was updated.
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated_at"`
}

// Validate validates this workflow
func (m *Workflow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutoAssignOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultStateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Workflow) validateAutoAssignOwner(formats strfmt.Registry) error {

	if err := validate.Required("auto_assign_owner", "body", m.AutoAssignOwner); err != nil {
		return err
	}

	return nil
}

func (m *Workflow) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Workflow) validateDefaultStateID(formats strfmt.Registry) error {

	if err := validate.Required("default_state_id", "body", m.DefaultStateID); err != nil {
		return err
	}

	return nil
}

func (m *Workflow) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *Workflow) validateEntityType(formats strfmt.Registry) error {

	if err := validate.Required("entity_type", "body", m.EntityType); err != nil {
		return err
	}

	return nil
}

func (m *Workflow) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Workflow) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Workflow) validateProjectIds(formats strfmt.Registry) error {

	if err := validate.Required("project_ids", "body", m.ProjectIds); err != nil {
		return err
	}

	return nil
}

func (m *Workflow) validateStates(formats strfmt.Registry) error {

	if err := validate.Required("states", "body", m.States); err != nil {
		return err
	}

	for i := 0; i < len(m.States); i++ {
		if swag.IsZero(m.States[i]) { // not required
			continue
		}

		if m.States[i] != nil {
			if err := m.States[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("states" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("states" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Workflow) validateTeamID(formats strfmt.Registry) error {

	if err := validate.Required("team_id", "body", m.TeamID); err != nil {
		return err
	}

	return nil
}

func (m *Workflow) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this workflow based on the context it is used
func (m *Workflow) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Workflow) contextValidateStates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.States); i++ {

		if m.States[i] != nil {
			if err := m.States[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("states" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("states" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Workflow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Workflow) UnmarshalBinary(b []byte) error {
	var res Workflow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
