// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HistoryActionStoryCreate An action representing a Story being created.
//
// swagger:model HistoryActionStoryCreate
type HistoryActionStoryCreate struct {

	// The action of the entity referenced.
	// Required: true
	// Enum: [create]
	Action *string `json:"action"`

	// The application URL of the Story.
	// Required: true
	// Max Length: 2048
	// Pattern: ^https?://.+$
	AppURL *string `json:"app_url"`

	// Whether or not the Story is blocked by another Story.
	Blocked bool `json:"blocked,omitempty"`

	// Whether or not the Story is blocking another Story.
	Blocker bool `json:"blocker,omitempty"`

	// Whether or not the Story is completed.
	Completed bool `json:"completed,omitempty"`

	// The timestamp representing the Story's deadline.
	Deadline string `json:"deadline,omitempty"`

	// The description of the Story.
	Description string `json:"description,omitempty"`

	// The type of entity referenced.
	// Required: true
	EntityType *string `json:"entity_type"`

	// The Epic ID for this Story.
	EpicID int64 `json:"epic_id,omitempty"`

	// The estimate (or point value) for the Story.
	Estimate int64 `json:"estimate,omitempty"`

	// An array of Member IDs for the followers of the Story.
	FollowerIds []strfmt.UUID `json:"follower_ids"`

	// The ID of the entity referenced.
	// Required: true
	ID *int64 `json:"id"`

	// The Iteration ID the Story is in.
	IterationID *int64 `json:"iteration_id,omitempty"`

	// An array of Labels IDs attached to the Story.
	LabelIds []int64 `json:"label_ids"`

	// The name of the Story.
	// Required: true
	Name *string `json:"name"`

	// An array of Story IDs that are the object of a Story Link relationship.
	ObjectStoryLinkIds []int64 `json:"object_story_link_ids"`

	// An array of Member IDs that are the owners of the Story.
	OwnerIds []strfmt.UUID `json:"owner_ids"`

	// The Project ID of the Story is in.
	ProjectID int64 `json:"project_id,omitempty"`

	// The ID of the Member that requested the Story.
	// Format: uuid
	RequestedByID strfmt.UUID `json:"requested_by_id,omitempty"`

	// Whether or not the Story has been started.
	Started bool `json:"started,omitempty"`

	// The type of Story; either feature, bug, or chore.
	// Required: true
	// Enum: [feature chore bug]
	StoryType *string `json:"story_type"`

	// An array of Story IDs that are the subject of a Story Link relationship.
	SubjectStoryLinkIds []int64 `json:"subject_story_link_ids"`

	// An array of Task IDs on this Story.
	TaskIds []int64 `json:"task_ids"`

	// An array of Workflow State IDs attached to the Story.
	WorkflowStateID int64 `json:"workflow_state_id,omitempty"`
}

// Validate validates this history action story create
func (m *HistoryActionStoryCreate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFollowerIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedByID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoryType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var historyActionStoryCreateTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["create"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		historyActionStoryCreateTypeActionPropEnum = append(historyActionStoryCreateTypeActionPropEnum, v)
	}
}

const (

	// HistoryActionStoryCreateActionCreate captures enum value "create"
	HistoryActionStoryCreateActionCreate string = "create"
)

// prop value enum
func (m *HistoryActionStoryCreate) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, historyActionStoryCreateTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HistoryActionStoryCreate) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

func (m *HistoryActionStoryCreate) validateAppURL(formats strfmt.Registry) error {

	if err := validate.Required("app_url", "body", m.AppURL); err != nil {
		return err
	}

	if err := validate.MaxLength("app_url", "body", *m.AppURL, 2048); err != nil {
		return err
	}

	if err := validate.Pattern("app_url", "body", *m.AppURL, `^https?://.+$`); err != nil {
		return err
	}

	return nil
}

func (m *HistoryActionStoryCreate) validateEntityType(formats strfmt.Registry) error {

	if err := validate.Required("entity_type", "body", m.EntityType); err != nil {
		return err
	}

	return nil
}

func (m *HistoryActionStoryCreate) validateFollowerIds(formats strfmt.Registry) error {
	if swag.IsZero(m.FollowerIds) { // not required
		return nil
	}

	for i := 0; i < len(m.FollowerIds); i++ {

		if err := validate.FormatOf("follower_ids"+"."+strconv.Itoa(i), "body", "uuid", m.FollowerIds[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *HistoryActionStoryCreate) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *HistoryActionStoryCreate) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *HistoryActionStoryCreate) validateOwnerIds(formats strfmt.Registry) error {
	if swag.IsZero(m.OwnerIds) { // not required
		return nil
	}

	for i := 0; i < len(m.OwnerIds); i++ {

		if err := validate.FormatOf("owner_ids"+"."+strconv.Itoa(i), "body", "uuid", m.OwnerIds[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *HistoryActionStoryCreate) validateRequestedByID(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestedByID) { // not required
		return nil
	}

	if err := validate.FormatOf("requested_by_id", "body", "uuid", m.RequestedByID.String(), formats); err != nil {
		return err
	}

	return nil
}

var historyActionStoryCreateTypeStoryTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["feature","chore","bug"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		historyActionStoryCreateTypeStoryTypePropEnum = append(historyActionStoryCreateTypeStoryTypePropEnum, v)
	}
}

const (

	// HistoryActionStoryCreateStoryTypeFeature captures enum value "feature"
	HistoryActionStoryCreateStoryTypeFeature string = "feature"

	// HistoryActionStoryCreateStoryTypeChore captures enum value "chore"
	HistoryActionStoryCreateStoryTypeChore string = "chore"

	// HistoryActionStoryCreateStoryTypeBug captures enum value "bug"
	HistoryActionStoryCreateStoryTypeBug string = "bug"
)

// prop value enum
func (m *HistoryActionStoryCreate) validateStoryTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, historyActionStoryCreateTypeStoryTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HistoryActionStoryCreate) validateStoryType(formats strfmt.Registry) error {

	if err := validate.Required("story_type", "body", m.StoryType); err != nil {
		return err
	}

	// value enum
	if err := m.validateStoryTypeEnum("story_type", "body", *m.StoryType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this history action story create based on context it is used
func (m *HistoryActionStoryCreate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HistoryActionStoryCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HistoryActionStoryCreate) UnmarshalBinary(b []byte) error {
	var res HistoryActionStoryCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
