// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SearchResults The results of the multi-entity search query.
//
// swagger:model SearchResults
type SearchResults struct {

	// epics
	// Required: true
	Epics *EpicSearchResults `json:"epics"`

	// stories
	// Required: true
	Stories *StorySearchResults `json:"stories"`
}

// Validate validates this search results
func (m *SearchResults) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEpics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStories(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchResults) validateEpics(formats strfmt.Registry) error {

	if err := validate.Required("epics", "body", m.Epics); err != nil {
		return err
	}

	if m.Epics != nil {
		if err := m.Epics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("epics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("epics")
			}
			return err
		}
	}

	return nil
}

func (m *SearchResults) validateStories(formats strfmt.Registry) error {

	if err := validate.Required("stories", "body", m.Stories); err != nil {
		return err
	}

	if m.Stories != nil {
		if err := m.Stories.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stories")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stories")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this search results based on the context it is used
func (m *SearchResults) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEpics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStories(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchResults) contextValidateEpics(ctx context.Context, formats strfmt.Registry) error {

	if m.Epics != nil {
		if err := m.Epics.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("epics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("epics")
			}
			return err
		}
	}

	return nil
}

func (m *SearchResults) contextValidateStories(ctx context.Context, formats strfmt.Registry) error {

	if m.Stories != nil {
		if err := m.Stories.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stories")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stories")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SearchResults) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchResults) UnmarshalBinary(b []byte) error {
	var res SearchResults
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
