// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateStories update stories
//
// swagger:model UpdateStories
type UpdateStories struct {

	// The ID of the story that the stories are to be moved below.
	AfterID int64 `json:"after_id,omitempty"`

	// If the Stories should be archived or not.
	Archived bool `json:"archived,omitempty"`

	// The ID of the story that the stories are to be moved before.
	BeforeID int64 `json:"before_id,omitempty"`

	// The due date of the story.
	// Format: date-time
	Deadline *strfmt.DateTime `json:"deadline,omitempty"`

	// The ID of the epic the story belongs to.
	EpicID *int64 `json:"epic_id,omitempty"`

	// The numeric point estimate of the story. Can also be null, which means unestimated.
	Estimate *int64 `json:"estimate,omitempty"`

	// An array of External Links associated with this story.
	ExternalLinks []string `json:"external_links"`

	// The UUIDs of the new followers to be added.
	// Unique: true
	FollowerIdsAdd []strfmt.UUID `json:"follower_ids_add"`

	// The UUIDs of the followers to be removed.
	// Unique: true
	FollowerIdsRemove []strfmt.UUID `json:"follower_ids_remove"`

	// The Id of the Group the Stories should belong to.
	// Format: uuid
	GroupID *strfmt.UUID `json:"group_id,omitempty"`

	// The ID of the iteration the story belongs to.
	IterationID *int64 `json:"iteration_id,omitempty"`

	// An array of labels to be added.
	LabelsAdd []*CreateLabelParams `json:"labels_add"`

	// An array of labels to be removed.
	LabelsRemove []*CreateLabelParams `json:"labels_remove"`

	// One of "first" or "last". This can be used to move the given story to the first or last position in the workflow state.
	// Enum: [last first]
	MoveTo string `json:"move_to,omitempty"`

	// The UUIDs of the new owners to be added.
	// Unique: true
	OwnerIdsAdd []strfmt.UUID `json:"owner_ids_add"`

	// The UUIDs of the owners to be removed.
	// Unique: true
	OwnerIdsRemove []strfmt.UUID `json:"owner_ids_remove"`

	// The ID of the Project the Stories should belong to.
	ProjectID *int64 `json:"project_id,omitempty"`

	// The ID of the member that requested the story.
	// Format: uuid
	RequestedByID strfmt.UUID `json:"requested_by_id,omitempty"`

	// The Ids of the Stories you wish to update.
	// Required: true
	// Unique: true
	StoryIds []int64 `json:"story_ids"`

	// The type of story (feature, bug, chore).
	// Enum: [feature chore bug]
	StoryType string `json:"story_type,omitempty"`

	// The ID of the workflow state to put the stories in.
	WorkflowStateID int64 `json:"workflow_state_id,omitempty"`
}

// Validate validates this update stories
func (m *UpdateStories) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeadline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFollowerIdsAdd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFollowerIdsRemove(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsAdd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsRemove(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMoveTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerIdsAdd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerIdsRemove(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedByID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoryIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoryType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateStories) validateDeadline(formats strfmt.Registry) error {
	if swag.IsZero(m.Deadline) { // not required
		return nil
	}

	if err := validate.FormatOf("deadline", "body", "date-time", m.Deadline.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateStories) validateFollowerIdsAdd(formats strfmt.Registry) error {
	if swag.IsZero(m.FollowerIdsAdd) { // not required
		return nil
	}

	if err := validate.UniqueItems("follower_ids_add", "body", m.FollowerIdsAdd); err != nil {
		return err
	}

	for i := 0; i < len(m.FollowerIdsAdd); i++ {

		if err := validate.FormatOf("follower_ids_add"+"."+strconv.Itoa(i), "body", "uuid", m.FollowerIdsAdd[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *UpdateStories) validateFollowerIdsRemove(formats strfmt.Registry) error {
	if swag.IsZero(m.FollowerIdsRemove) { // not required
		return nil
	}

	if err := validate.UniqueItems("follower_ids_remove", "body", m.FollowerIdsRemove); err != nil {
		return err
	}

	for i := 0; i < len(m.FollowerIdsRemove); i++ {

		if err := validate.FormatOf("follower_ids_remove"+"."+strconv.Itoa(i), "body", "uuid", m.FollowerIdsRemove[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *UpdateStories) validateGroupID(formats strfmt.Registry) error {
	if swag.IsZero(m.GroupID) { // not required
		return nil
	}

	if err := validate.FormatOf("group_id", "body", "uuid", m.GroupID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateStories) validateLabelsAdd(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelsAdd) { // not required
		return nil
	}

	for i := 0; i < len(m.LabelsAdd); i++ {
		if swag.IsZero(m.LabelsAdd[i]) { // not required
			continue
		}

		if m.LabelsAdd[i] != nil {
			if err := m.LabelsAdd[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labels_add" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labels_add" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateStories) validateLabelsRemove(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelsRemove) { // not required
		return nil
	}

	for i := 0; i < len(m.LabelsRemove); i++ {
		if swag.IsZero(m.LabelsRemove[i]) { // not required
			continue
		}

		if m.LabelsRemove[i] != nil {
			if err := m.LabelsRemove[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labels_remove" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labels_remove" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var updateStoriesTypeMoveToPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["last","first"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateStoriesTypeMoveToPropEnum = append(updateStoriesTypeMoveToPropEnum, v)
	}
}

const (

	// UpdateStoriesMoveToLast captures enum value "last"
	UpdateStoriesMoveToLast string = "last"

	// UpdateStoriesMoveToFirst captures enum value "first"
	UpdateStoriesMoveToFirst string = "first"
)

// prop value enum
func (m *UpdateStories) validateMoveToEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateStoriesTypeMoveToPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateStories) validateMoveTo(formats strfmt.Registry) error {
	if swag.IsZero(m.MoveTo) { // not required
		return nil
	}

	// value enum
	if err := m.validateMoveToEnum("move_to", "body", m.MoveTo); err != nil {
		return err
	}

	return nil
}

func (m *UpdateStories) validateOwnerIdsAdd(formats strfmt.Registry) error {
	if swag.IsZero(m.OwnerIdsAdd) { // not required
		return nil
	}

	if err := validate.UniqueItems("owner_ids_add", "body", m.OwnerIdsAdd); err != nil {
		return err
	}

	for i := 0; i < len(m.OwnerIdsAdd); i++ {

		if err := validate.FormatOf("owner_ids_add"+"."+strconv.Itoa(i), "body", "uuid", m.OwnerIdsAdd[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *UpdateStories) validateOwnerIdsRemove(formats strfmt.Registry) error {
	if swag.IsZero(m.OwnerIdsRemove) { // not required
		return nil
	}

	if err := validate.UniqueItems("owner_ids_remove", "body", m.OwnerIdsRemove); err != nil {
		return err
	}

	for i := 0; i < len(m.OwnerIdsRemove); i++ {

		if err := validate.FormatOf("owner_ids_remove"+"."+strconv.Itoa(i), "body", "uuid", m.OwnerIdsRemove[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *UpdateStories) validateRequestedByID(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestedByID) { // not required
		return nil
	}

	if err := validate.FormatOf("requested_by_id", "body", "uuid", m.RequestedByID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateStories) validateStoryIds(formats strfmt.Registry) error {

	if err := validate.Required("story_ids", "body", m.StoryIds); err != nil {
		return err
	}

	if err := validate.UniqueItems("story_ids", "body", m.StoryIds); err != nil {
		return err
	}

	return nil
}

var updateStoriesTypeStoryTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["feature","chore","bug"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateStoriesTypeStoryTypePropEnum = append(updateStoriesTypeStoryTypePropEnum, v)
	}
}

const (

	// UpdateStoriesStoryTypeFeature captures enum value "feature"
	UpdateStoriesStoryTypeFeature string = "feature"

	// UpdateStoriesStoryTypeChore captures enum value "chore"
	UpdateStoriesStoryTypeChore string = "chore"

	// UpdateStoriesStoryTypeBug captures enum value "bug"
	UpdateStoriesStoryTypeBug string = "bug"
)

// prop value enum
func (m *UpdateStories) validateStoryTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateStoriesTypeStoryTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateStories) validateStoryType(formats strfmt.Registry) error {
	if swag.IsZero(m.StoryType) { // not required
		return nil
	}

	// value enum
	if err := m.validateStoryTypeEnum("story_type", "body", m.StoryType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update stories based on the context it is used
func (m *UpdateStories) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLabelsAdd(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelsRemove(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateStories) contextValidateLabelsAdd(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LabelsAdd); i++ {

		if m.LabelsAdd[i] != nil {
			if err := m.LabelsAdd[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labels_add" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labels_add" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateStories) contextValidateLabelsRemove(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LabelsRemove); i++ {

		if m.LabelsRemove[i] != nil {
			if err := m.LabelsRemove[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labels_remove" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labels_remove" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateStories) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateStories) UnmarshalBinary(b []byte) error {
	var res UpdateStories
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
