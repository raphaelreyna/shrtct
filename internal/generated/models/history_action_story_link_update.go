// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HistoryActionStoryLinkUpdate An action representing a Story Link being updated.
//
// swagger:model HistoryActionStoryLinkUpdate
type HistoryActionStoryLinkUpdate struct {

	// The action of the entity referenced.
	// Required: true
	// Enum: [update]
	Action *string `json:"action"`

	// changes
	// Required: true
	Changes *HistoryChangesStoryLink `json:"changes"`

	// The type of entity referenced.
	// Required: true
	EntityType *string `json:"entity_type"`

	// The ID of the entity referenced.
	// Required: true
	ID *int64 `json:"id"`

	// The Story ID of the object Story.
	// Required: true
	ObjectID *int64 `json:"object_id"`

	// The Story ID of the subject Story.
	// Required: true
	SubjectID *int64 `json:"subject_id"`

	// The verb describing the link's relationship.
	// Required: true
	// Enum: [blocks duplicates relates to]
	Verb *string `json:"verb"`
}

// Validate validates this history action story link update
func (m *HistoryActionStoryLinkUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerb(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var historyActionStoryLinkUpdateTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["update"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		historyActionStoryLinkUpdateTypeActionPropEnum = append(historyActionStoryLinkUpdateTypeActionPropEnum, v)
	}
}

const (

	// HistoryActionStoryLinkUpdateActionUpdate captures enum value "update"
	HistoryActionStoryLinkUpdateActionUpdate string = "update"
)

// prop value enum
func (m *HistoryActionStoryLinkUpdate) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, historyActionStoryLinkUpdateTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HistoryActionStoryLinkUpdate) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

func (m *HistoryActionStoryLinkUpdate) validateChanges(formats strfmt.Registry) error {

	if err := validate.Required("changes", "body", m.Changes); err != nil {
		return err
	}

	if m.Changes != nil {
		if err := m.Changes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("changes")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryActionStoryLinkUpdate) validateEntityType(formats strfmt.Registry) error {

	if err := validate.Required("entity_type", "body", m.EntityType); err != nil {
		return err
	}

	return nil
}

func (m *HistoryActionStoryLinkUpdate) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *HistoryActionStoryLinkUpdate) validateObjectID(formats strfmt.Registry) error {

	if err := validate.Required("object_id", "body", m.ObjectID); err != nil {
		return err
	}

	return nil
}

func (m *HistoryActionStoryLinkUpdate) validateSubjectID(formats strfmt.Registry) error {

	if err := validate.Required("subject_id", "body", m.SubjectID); err != nil {
		return err
	}

	return nil
}

var historyActionStoryLinkUpdateTypeVerbPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["blocks","duplicates","relates to"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		historyActionStoryLinkUpdateTypeVerbPropEnum = append(historyActionStoryLinkUpdateTypeVerbPropEnum, v)
	}
}

const (

	// HistoryActionStoryLinkUpdateVerbBlocks captures enum value "blocks"
	HistoryActionStoryLinkUpdateVerbBlocks string = "blocks"

	// HistoryActionStoryLinkUpdateVerbDuplicates captures enum value "duplicates"
	HistoryActionStoryLinkUpdateVerbDuplicates string = "duplicates"

	// HistoryActionStoryLinkUpdateVerbRelatesTo captures enum value "relates to"
	HistoryActionStoryLinkUpdateVerbRelatesTo string = "relates to"
)

// prop value enum
func (m *HistoryActionStoryLinkUpdate) validateVerbEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, historyActionStoryLinkUpdateTypeVerbPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HistoryActionStoryLinkUpdate) validateVerb(formats strfmt.Registry) error {

	if err := validate.Required("verb", "body", m.Verb); err != nil {
		return err
	}

	// value enum
	if err := m.validateVerbEnum("verb", "body", *m.Verb); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this history action story link update based on the context it is used
func (m *HistoryActionStoryLinkUpdate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChanges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HistoryActionStoryLinkUpdate) contextValidateChanges(ctx context.Context, formats strfmt.Registry) error {

	if m.Changes != nil {
		if err := m.Changes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("changes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HistoryActionStoryLinkUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HistoryActionStoryLinkUpdate) UnmarshalBinary(b []byte) error {
	var res HistoryActionStoryLinkUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
