// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HistoryChangesStory The changes that have occurred as a result of the action.
//
// swagger:model HistoryChangesStory
type HistoryChangesStory struct {

	// archived
	Archived *StoryHistoryChangeOldNewBool `json:"archived,omitempty"`

	// blocked
	Blocked *StoryHistoryChangeOldNewBool `json:"blocked,omitempty"`

	// blocker
	Blocker *StoryHistoryChangeOldNewBool `json:"blocker,omitempty"`

	// branch ids
	BranchIds *StoryHistoryChangeAddsRemovesInt `json:"branch_ids,omitempty"`

	// commit ids
	CommitIds *StoryHistoryChangeAddsRemovesInt `json:"commit_ids,omitempty"`

	// completed
	Completed *StoryHistoryChangeOldNewBool `json:"completed,omitempty"`

	// deadline
	Deadline *StoryHistoryChangeOldNewStr `json:"deadline,omitempty"`

	// description
	Description *StoryHistoryChangeOldNewStr `json:"description,omitempty"`

	// epic id
	EpicID *StoryHistoryChangeOldNewInt `json:"epic_id,omitempty"`

	// estimate
	Estimate *StoryHistoryChangeOldNewInt `json:"estimate,omitempty"`

	// follower ids
	FollowerIds *StoryHistoryChangeAddsRemovesUUID `json:"follower_ids,omitempty"`

	// iteration id
	IterationID *StoryHistoryChangeOldNewInt `json:"iteration_id,omitempty"`

	// label ids
	LabelIds *StoryHistoryChangeAddsRemovesInt `json:"label_ids,omitempty"`

	// mention ids
	MentionIds *StoryHistoryChangeAddsRemovesUUID `json:"mention_ids,omitempty"`

	// name
	Name *StoryHistoryChangeOldNewStr `json:"name,omitempty"`

	// object story link ids
	ObjectStoryLinkIds *StoryHistoryChangeAddsRemovesInt `json:"object_story_link_ids,omitempty"`

	// owner ids
	OwnerIds *StoryHistoryChangeAddsRemovesUUID `json:"owner_ids,omitempty"`

	// project id
	ProjectID *StoryHistoryChangeOldNewInt `json:"project_id,omitempty"`

	// requested by id
	RequestedByID *StoryHistoryChangeOldNewUUID `json:"requested_by_id,omitempty"`

	// started
	Started *StoryHistoryChangeOldNewBool `json:"started,omitempty"`

	// story type
	StoryType *StoryHistoryChangeOldNewStr `json:"story_type,omitempty"`

	// subject story link ids
	SubjectStoryLinkIds *StoryHistoryChangeAddsRemovesInt `json:"subject_story_link_ids,omitempty"`

	// task ids
	TaskIds *StoryHistoryChangeAddsRemovesInt `json:"task_ids,omitempty"`

	// workflow state id
	WorkflowStateID *StoryHistoryChangeOldNewInt `json:"workflow_state_id,omitempty"`
}

// Validate validates this history changes story
func (m *HistoryChangesStory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchived(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlocked(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlocker(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBranchIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommitIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeadline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEpicID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEstimate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFollowerIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIterationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMentionIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectStoryLinkIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedByID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStarted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoryType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubjectStoryLinkIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflowStateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HistoryChangesStory) validateArchived(formats strfmt.Registry) error {
	if swag.IsZero(m.Archived) { // not required
		return nil
	}

	if m.Archived != nil {
		if err := m.Archived.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archived")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("archived")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) validateBlocked(formats strfmt.Registry) error {
	if swag.IsZero(m.Blocked) { // not required
		return nil
	}

	if m.Blocked != nil {
		if err := m.Blocked.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("blocked")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("blocked")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) validateBlocker(formats strfmt.Registry) error {
	if swag.IsZero(m.Blocker) { // not required
		return nil
	}

	if m.Blocker != nil {
		if err := m.Blocker.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("blocker")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("blocker")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) validateBranchIds(formats strfmt.Registry) error {
	if swag.IsZero(m.BranchIds) { // not required
		return nil
	}

	if m.BranchIds != nil {
		if err := m.BranchIds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("branch_ids")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("branch_ids")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) validateCommitIds(formats strfmt.Registry) error {
	if swag.IsZero(m.CommitIds) { // not required
		return nil
	}

	if m.CommitIds != nil {
		if err := m.CommitIds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commit_ids")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commit_ids")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) validateCompleted(formats strfmt.Registry) error {
	if swag.IsZero(m.Completed) { // not required
		return nil
	}

	if m.Completed != nil {
		if err := m.Completed.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("completed")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("completed")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) validateDeadline(formats strfmt.Registry) error {
	if swag.IsZero(m.Deadline) { // not required
		return nil
	}

	if m.Deadline != nil {
		if err := m.Deadline.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deadline")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deadline")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("description")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("description")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) validateEpicID(formats strfmt.Registry) error {
	if swag.IsZero(m.EpicID) { // not required
		return nil
	}

	if m.EpicID != nil {
		if err := m.EpicID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("epic_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("epic_id")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) validateEstimate(formats strfmt.Registry) error {
	if swag.IsZero(m.Estimate) { // not required
		return nil
	}

	if m.Estimate != nil {
		if err := m.Estimate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("estimate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("estimate")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) validateFollowerIds(formats strfmt.Registry) error {
	if swag.IsZero(m.FollowerIds) { // not required
		return nil
	}

	if m.FollowerIds != nil {
		if err := m.FollowerIds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("follower_ids")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("follower_ids")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) validateIterationID(formats strfmt.Registry) error {
	if swag.IsZero(m.IterationID) { // not required
		return nil
	}

	if m.IterationID != nil {
		if err := m.IterationID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iteration_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iteration_id")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) validateLabelIds(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelIds) { // not required
		return nil
	}

	if m.LabelIds != nil {
		if err := m.LabelIds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("label_ids")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("label_ids")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) validateMentionIds(formats strfmt.Registry) error {
	if swag.IsZero(m.MentionIds) { // not required
		return nil
	}

	if m.MentionIds != nil {
		if err := m.MentionIds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mention_ids")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mention_ids")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if m.Name != nil {
		if err := m.Name.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("name")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) validateObjectStoryLinkIds(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectStoryLinkIds) { // not required
		return nil
	}

	if m.ObjectStoryLinkIds != nil {
		if err := m.ObjectStoryLinkIds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("object_story_link_ids")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("object_story_link_ids")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) validateOwnerIds(formats strfmt.Registry) error {
	if swag.IsZero(m.OwnerIds) { // not required
		return nil
	}

	if m.OwnerIds != nil {
		if err := m.OwnerIds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner_ids")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("owner_ids")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) validateProjectID(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if m.ProjectID != nil {
		if err := m.ProjectID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("project_id")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) validateRequestedByID(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestedByID) { // not required
		return nil
	}

	if m.RequestedByID != nil {
		if err := m.RequestedByID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("requested_by_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("requested_by_id")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) validateStarted(formats strfmt.Registry) error {
	if swag.IsZero(m.Started) { // not required
		return nil
	}

	if m.Started != nil {
		if err := m.Started.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("started")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("started")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) validateStoryType(formats strfmt.Registry) error {
	if swag.IsZero(m.StoryType) { // not required
		return nil
	}

	if m.StoryType != nil {
		if err := m.StoryType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("story_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("story_type")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) validateSubjectStoryLinkIds(formats strfmt.Registry) error {
	if swag.IsZero(m.SubjectStoryLinkIds) { // not required
		return nil
	}

	if m.SubjectStoryLinkIds != nil {
		if err := m.SubjectStoryLinkIds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subject_story_link_ids")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subject_story_link_ids")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) validateTaskIds(formats strfmt.Registry) error {
	if swag.IsZero(m.TaskIds) { // not required
		return nil
	}

	if m.TaskIds != nil {
		if err := m.TaskIds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("task_ids")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("task_ids")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) validateWorkflowStateID(formats strfmt.Registry) error {
	if swag.IsZero(m.WorkflowStateID) { // not required
		return nil
	}

	if m.WorkflowStateID != nil {
		if err := m.WorkflowStateID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workflow_state_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workflow_state_id")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this history changes story based on the context it is used
func (m *HistoryChangesStory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArchived(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBlocked(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBlocker(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBranchIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCommitIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCompleted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeadline(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEpicID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEstimate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFollowerIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIterationID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMentionIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectStoryLinkIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwnerIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProjectID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRequestedByID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStarted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStoryType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubjectStoryLinkIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaskIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkflowStateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HistoryChangesStory) contextValidateArchived(ctx context.Context, formats strfmt.Registry) error {

	if m.Archived != nil {
		if err := m.Archived.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archived")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("archived")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) contextValidateBlocked(ctx context.Context, formats strfmt.Registry) error {

	if m.Blocked != nil {
		if err := m.Blocked.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("blocked")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("blocked")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) contextValidateBlocker(ctx context.Context, formats strfmt.Registry) error {

	if m.Blocker != nil {
		if err := m.Blocker.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("blocker")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("blocker")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) contextValidateBranchIds(ctx context.Context, formats strfmt.Registry) error {

	if m.BranchIds != nil {
		if err := m.BranchIds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("branch_ids")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("branch_ids")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) contextValidateCommitIds(ctx context.Context, formats strfmt.Registry) error {

	if m.CommitIds != nil {
		if err := m.CommitIds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commit_ids")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commit_ids")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) contextValidateCompleted(ctx context.Context, formats strfmt.Registry) error {

	if m.Completed != nil {
		if err := m.Completed.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("completed")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("completed")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) contextValidateDeadline(ctx context.Context, formats strfmt.Registry) error {

	if m.Deadline != nil {
		if err := m.Deadline.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deadline")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deadline")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if m.Description != nil {
		if err := m.Description.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("description")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("description")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) contextValidateEpicID(ctx context.Context, formats strfmt.Registry) error {

	if m.EpicID != nil {
		if err := m.EpicID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("epic_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("epic_id")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) contextValidateEstimate(ctx context.Context, formats strfmt.Registry) error {

	if m.Estimate != nil {
		if err := m.Estimate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("estimate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("estimate")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) contextValidateFollowerIds(ctx context.Context, formats strfmt.Registry) error {

	if m.FollowerIds != nil {
		if err := m.FollowerIds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("follower_ids")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("follower_ids")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) contextValidateIterationID(ctx context.Context, formats strfmt.Registry) error {

	if m.IterationID != nil {
		if err := m.IterationID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iteration_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iteration_id")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) contextValidateLabelIds(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelIds != nil {
		if err := m.LabelIds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("label_ids")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("label_ids")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) contextValidateMentionIds(ctx context.Context, formats strfmt.Registry) error {

	if m.MentionIds != nil {
		if err := m.MentionIds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mention_ids")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mention_ids")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if m.Name != nil {
		if err := m.Name.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("name")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) contextValidateObjectStoryLinkIds(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectStoryLinkIds != nil {
		if err := m.ObjectStoryLinkIds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("object_story_link_ids")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("object_story_link_ids")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) contextValidateOwnerIds(ctx context.Context, formats strfmt.Registry) error {

	if m.OwnerIds != nil {
		if err := m.OwnerIds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner_ids")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("owner_ids")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) contextValidateProjectID(ctx context.Context, formats strfmt.Registry) error {

	if m.ProjectID != nil {
		if err := m.ProjectID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("project_id")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) contextValidateRequestedByID(ctx context.Context, formats strfmt.Registry) error {

	if m.RequestedByID != nil {
		if err := m.RequestedByID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("requested_by_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("requested_by_id")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) contextValidateStarted(ctx context.Context, formats strfmt.Registry) error {

	if m.Started != nil {
		if err := m.Started.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("started")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("started")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) contextValidateStoryType(ctx context.Context, formats strfmt.Registry) error {

	if m.StoryType != nil {
		if err := m.StoryType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("story_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("story_type")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) contextValidateSubjectStoryLinkIds(ctx context.Context, formats strfmt.Registry) error {

	if m.SubjectStoryLinkIds != nil {
		if err := m.SubjectStoryLinkIds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subject_story_link_ids")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subject_story_link_ids")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) contextValidateTaskIds(ctx context.Context, formats strfmt.Registry) error {

	if m.TaskIds != nil {
		if err := m.TaskIds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("task_ids")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("task_ids")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryChangesStory) contextValidateWorkflowStateID(ctx context.Context, formats strfmt.Registry) error {

	if m.WorkflowStateID != nil {
		if err := m.WorkflowStateID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workflow_state_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workflow_state_id")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HistoryChangesStory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HistoryChangesStory) UnmarshalBinary(b []byte) error {
	var res HistoryChangesStory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
