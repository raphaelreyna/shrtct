// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// History A history item is a group of actions that represent a transactional change to a Story.
//
// swagger:model History
type History struct {

	// An array of actions that were performed for the change.
	// Required: true
	Actions []interface{} `json:"actions"`

	// The date when the change occurred.
	// Required: true
	ChangedAt *string `json:"changed_at"`

	// The ID of the webhook that handled the change.
	ExternalID string `json:"external_id,omitempty"`

	// The ID representing the change for the story.
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// The ID of the member who performed the change.
	// Format: uuid
	MemberID strfmt.UUID `json:"member_id,omitempty"`

	// The ID of the primary entity that has changed, if applicable.
	PrimaryID int64 `json:"primary_id,omitempty"`

	// An array of objects affected by the change. Reference objects provide basic information for the entities reference in the history actions. Some have specific fields, but they always contain an id, entity_type, and a name.
	References []interface{} `json:"references"`

	// The version of the change format.
	// Required: true
	// Enum: [v1]
	Version *string `json:"version"`

	// The ID of the webhook that handled the change.
	WebhookID *string `json:"webhook_id,omitempty"`
}

// Validate validates this history
func (m *History) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChangedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemberID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *History) validateActions(formats strfmt.Registry) error {

	if err := validate.Required("actions", "body", m.Actions); err != nil {
		return err
	}

	return nil
}

func (m *History) validateChangedAt(formats strfmt.Registry) error {

	if err := validate.Required("changed_at", "body", m.ChangedAt); err != nil {
		return err
	}

	return nil
}

func (m *History) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *History) validateMemberID(formats strfmt.Registry) error {
	if swag.IsZero(m.MemberID) { // not required
		return nil
	}

	if err := validate.FormatOf("member_id", "body", "uuid", m.MemberID.String(), formats); err != nil {
		return err
	}

	return nil
}

var historyTypeVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["v1"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		historyTypeVersionPropEnum = append(historyTypeVersionPropEnum, v)
	}
}

const (

	// HistoryVersionV1 captures enum value "v1"
	HistoryVersionV1 string = "v1"
)

// prop value enum
func (m *History) validateVersionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, historyTypeVersionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *History) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	// value enum
	if err := m.validateVersionEnum("version", "body", *m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this history based on context it is used
func (m *History) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *History) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *History) UnmarshalBinary(b []byte) error {
	var res History
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
