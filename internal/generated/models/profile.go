// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Profile A group of Member profile details.
//
// swagger:model Profile
type Profile struct {

	// A true/false boolean indicating whether the Member has been deactivated within Shortcut.
	// Required: true
	Deactivated *bool `json:"deactivated"`

	// display icon
	// Required: true
	DisplayIcon *Icon `json:"display_icon"`

	// The primary email address of the Member with the Organization.
	// Required: true
	EmailAddress *string `json:"email_address"`

	// A string description of this resource.
	// Required: true
	EntityType *string `json:"entity_type"`

	// This is the gravatar hash associated with email_address.
	// Required: true
	GravatarHash *string `json:"gravatar_hash"`

	// The unique identifier of the profile.
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// The Member's username within the Organization.
	// Required: true
	MentionName *string `json:"mention_name"`

	// The Member's name within the Organization.
	// Required: true
	Name *string `json:"name"`

	// If Two Factor Authentication is activated for this User.
	TwoFactorAuthActivated bool `json:"two_factor_auth_activated,omitempty"`
}

// Validate validates this profile
func (m *Profile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeactivated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayIcon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGravatarHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMentionName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Profile) validateDeactivated(formats strfmt.Registry) error {

	if err := validate.Required("deactivated", "body", m.Deactivated); err != nil {
		return err
	}

	return nil
}

func (m *Profile) validateDisplayIcon(formats strfmt.Registry) error {

	if err := validate.Required("display_icon", "body", m.DisplayIcon); err != nil {
		return err
	}

	if m.DisplayIcon != nil {
		if err := m.DisplayIcon.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("display_icon")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("display_icon")
			}
			return err
		}
	}

	return nil
}

func (m *Profile) validateEmailAddress(formats strfmt.Registry) error {

	if err := validate.Required("email_address", "body", m.EmailAddress); err != nil {
		return err
	}

	return nil
}

func (m *Profile) validateEntityType(formats strfmt.Registry) error {

	if err := validate.Required("entity_type", "body", m.EntityType); err != nil {
		return err
	}

	return nil
}

func (m *Profile) validateGravatarHash(formats strfmt.Registry) error {

	if err := validate.Required("gravatar_hash", "body", m.GravatarHash); err != nil {
		return err
	}

	return nil
}

func (m *Profile) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Profile) validateMentionName(formats strfmt.Registry) error {

	if err := validate.Required("mention_name", "body", m.MentionName); err != nil {
		return err
	}

	return nil
}

func (m *Profile) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this profile based on the context it is used
func (m *Profile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDisplayIcon(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Profile) contextValidateDisplayIcon(ctx context.Context, formats strfmt.Registry) error {

	if m.DisplayIcon != nil {
		if err := m.DisplayIcon.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("display_icon")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("display_icon")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Profile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Profile) UnmarshalBinary(b []byte) error {
	var res Profile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
