// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UnusableEntitlementError unusable entitlement error
//
// swagger:model UnusableEntitlementError
type UnusableEntitlementError struct {

	// Short tag describing the unusable entitlement action taken by the user.
	// Required: true
	// Max Length: 63
	// Min Length: 1
	EntitlementTag *string `json:"entitlement_tag"`

	// Message displayed to the user on why their action failed.
	// Required: true
	// Max Length: 256
	// Min Length: 1
	Message *string `json:"message"`

	// The tag for violating an entitlement action.
	// Required: true
	// Enum: [entitlement-violation]
	ReasonTag *string `json:"reason_tag"`
}

// Validate validates this unusable entitlement error
func (m *UnusableEntitlementError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntitlementTag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReasonTag(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UnusableEntitlementError) validateEntitlementTag(formats strfmt.Registry) error {

	if err := validate.Required("entitlement_tag", "body", m.EntitlementTag); err != nil {
		return err
	}

	if err := validate.MinLength("entitlement_tag", "body", *m.EntitlementTag, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("entitlement_tag", "body", *m.EntitlementTag, 63); err != nil {
		return err
	}

	return nil
}

func (m *UnusableEntitlementError) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	if err := validate.MinLength("message", "body", *m.Message, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("message", "body", *m.Message, 256); err != nil {
		return err
	}

	return nil
}

var unusableEntitlementErrorTypeReasonTagPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["entitlement-violation"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		unusableEntitlementErrorTypeReasonTagPropEnum = append(unusableEntitlementErrorTypeReasonTagPropEnum, v)
	}
}

const (

	// UnusableEntitlementErrorReasonTagEntitlementDashViolation captures enum value "entitlement-violation"
	UnusableEntitlementErrorReasonTagEntitlementDashViolation string = "entitlement-violation"
)

// prop value enum
func (m *UnusableEntitlementError) validateReasonTagEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, unusableEntitlementErrorTypeReasonTagPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UnusableEntitlementError) validateReasonTag(formats strfmt.Registry) error {

	if err := validate.Required("reason_tag", "body", m.ReasonTag); err != nil {
		return err
	}

	// value enum
	if err := m.validateReasonTagEnum("reason_tag", "body", *m.ReasonTag); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this unusable entitlement error based on context it is used
func (m *UnusableEntitlementError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UnusableEntitlementError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UnusableEntitlementError) UnmarshalBinary(b []byte) error {
	var res UnusableEntitlementError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
