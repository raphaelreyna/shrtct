// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Commit Commit refers to a VCS commit and all associated details.
//
// swagger:model Commit
type Commit struct {

	// The email address of the VCS user that authored the Commit.
	// Required: true
	AuthorEmail *string `json:"author_email"`

	// The ID of the Member that authored the Commit, if known.
	// Required: true
	// Format: uuid
	AuthorID *strfmt.UUID `json:"author_id"`

	// author identity
	// Required: true
	AuthorIdentity *Identity `json:"author_identity"`

	// The time/date the Commit was created.
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// A string description of this resource.
	// Required: true
	EntityType *string `json:"entity_type"`

	// The Commit hash.
	// Required: true
	Hash *string `json:"hash"`

	// The unique ID of the Commit.
	// Required: true
	ID *int64 `json:"id"`

	// The IDs of the Branches the Commit has been merged into.
	// Required: true
	MergedBranchIds []int64 `json:"merged_branch_ids"`

	// The Commit message.
	// Required: true
	Message *string `json:"message"`

	// The ID of the Repository that contains the Commit.
	// Required: true
	RepositoryID *int64 `json:"repository_id"`

	// The time/date the Commit was pushed.
	// Required: true
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"timestamp"`

	// The time/date the Commit was updated.
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated_at"`

	// The URL of the Commit.
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this commit
func (m *Commit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorIdentity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMergedBranchIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepositoryID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Commit) validateAuthorEmail(formats strfmt.Registry) error {

	if err := validate.Required("author_email", "body", m.AuthorEmail); err != nil {
		return err
	}

	return nil
}

func (m *Commit) validateAuthorID(formats strfmt.Registry) error {

	if err := validate.Required("author_id", "body", m.AuthorID); err != nil {
		return err
	}

	if err := validate.FormatOf("author_id", "body", "uuid", m.AuthorID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Commit) validateAuthorIdentity(formats strfmt.Registry) error {

	if err := validate.Required("author_identity", "body", m.AuthorIdentity); err != nil {
		return err
	}

	if m.AuthorIdentity != nil {
		if err := m.AuthorIdentity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("author_identity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("author_identity")
			}
			return err
		}
	}

	return nil
}

func (m *Commit) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Commit) validateEntityType(formats strfmt.Registry) error {

	if err := validate.Required("entity_type", "body", m.EntityType); err != nil {
		return err
	}

	return nil
}

func (m *Commit) validateHash(formats strfmt.Registry) error {

	if err := validate.Required("hash", "body", m.Hash); err != nil {
		return err
	}

	return nil
}

func (m *Commit) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Commit) validateMergedBranchIds(formats strfmt.Registry) error {

	if err := validate.Required("merged_branch_ids", "body", m.MergedBranchIds); err != nil {
		return err
	}

	return nil
}

func (m *Commit) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *Commit) validateRepositoryID(formats strfmt.Registry) error {

	if err := validate.Required("repository_id", "body", m.RepositoryID); err != nil {
		return err
	}

	return nil
}

func (m *Commit) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Commit) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Commit) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this commit based on the context it is used
func (m *Commit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthorIdentity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Commit) contextValidateAuthorIdentity(ctx context.Context, formats strfmt.Registry) error {

	if m.AuthorIdentity != nil {
		if err := m.AuthorIdentity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("author_identity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("author_identity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Commit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Commit) UnmarshalBinary(b []byte) error {
	var res Commit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
