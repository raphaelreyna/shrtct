// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EntityTemplate An entity template can be used to prefill various fields when creating new stories.
//
// swagger:model EntityTemplate
type EntityTemplate struct {

	// The unique ID of the member who created the template.
	// Required: true
	// Format: uuid
	AuthorID *strfmt.UUID `json:"author_id"`

	// The time/date when the entity template was created.
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// A string description of this resource.
	// Required: true
	EntityType *string `json:"entity_type"`

	// The unique identifier for the entity template.
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// The last time that someone created an entity using this template.
	// Required: true
	// Format: date-time
	LastUsedAt *strfmt.DateTime `json:"last_used_at"`

	// The template's name.
	// Required: true
	Name *string `json:"name"`

	// story contents
	// Required: true
	StoryContents *StoryContents `json:"story_contents"`

	// The time/date when the entity template was last updated.
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated_at"`
}

// Validate validates this entity template
func (m *EntityTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUsedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoryContents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EntityTemplate) validateAuthorID(formats strfmt.Registry) error {

	if err := validate.Required("author_id", "body", m.AuthorID); err != nil {
		return err
	}

	if err := validate.FormatOf("author_id", "body", "uuid", m.AuthorID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EntityTemplate) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EntityTemplate) validateEntityType(formats strfmt.Registry) error {

	if err := validate.Required("entity_type", "body", m.EntityType); err != nil {
		return err
	}

	return nil
}

func (m *EntityTemplate) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EntityTemplate) validateLastUsedAt(formats strfmt.Registry) error {

	if err := validate.Required("last_used_at", "body", m.LastUsedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("last_used_at", "body", "date-time", m.LastUsedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EntityTemplate) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *EntityTemplate) validateStoryContents(formats strfmt.Registry) error {

	if err := validate.Required("story_contents", "body", m.StoryContents); err != nil {
		return err
	}

	if m.StoryContents != nil {
		if err := m.StoryContents.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("story_contents")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("story_contents")
			}
			return err
		}
	}

	return nil
}

func (m *EntityTemplate) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this entity template based on the context it is used
func (m *EntityTemplate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStoryContents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EntityTemplate) contextValidateStoryContents(ctx context.Context, formats strfmt.Registry) error {

	if m.StoryContents != nil {
		if err := m.StoryContents.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("story_contents")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("story_contents")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EntityTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EntityTemplate) UnmarshalBinary(b []byte) error {
	var res EntityTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
