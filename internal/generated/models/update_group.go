// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateGroup update group
//
// swagger:model UpdateGroup
type UpdateGroup struct {

	// Whether or not this Group is archived.
	Archived *bool `json:"archived,omitempty"`

	// The color you wish to use for the Group in the system.
	// Min Length: 1
	// Pattern: ^#[a-fA-F0-9]{6}$
	Color *string `json:"color,omitempty"`

	// The color key you wish to use for the Group in the system.
	// Enum: [blue purple midnight-blue orange yellow-green brass gray fuchsia yellow pink sky-blue green red black slate turquoise]
	ColorKey string `json:"color_key,omitempty"`

	// The description of this Group.
	Description string `json:"description,omitempty"`

	// The Icon id for the avatar of this Group.
	// Format: uuid
	DisplayIconID *strfmt.UUID `json:"display_icon_id,omitempty"`

	// The Member ids to add to this Group.
	// Unique: true
	MemberIds []strfmt.UUID `json:"member_ids"`

	// The mention name of this Group.
	// Min Length: 1
	MentionName string `json:"mention_name,omitempty"`

	// The name of this Group.
	// Min Length: 1
	Name string `json:"name,omitempty"`

	// The Workflow ids to add to the Group.
	WorkflowIds []int64 `json:"workflow_ids"`
}

// Validate validates this update group
func (m *UpdateGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateColorKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayIconID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemberIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMentionName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateGroup) validateColor(formats strfmt.Registry) error {
	if swag.IsZero(m.Color) { // not required
		return nil
	}

	if err := validate.MinLength("color", "body", *m.Color, 1); err != nil {
		return err
	}

	if err := validate.Pattern("color", "body", *m.Color, `^#[a-fA-F0-9]{6}$`); err != nil {
		return err
	}

	return nil
}

var updateGroupTypeColorKeyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["blue","purple","midnight-blue","orange","yellow-green","brass","gray","fuchsia","yellow","pink","sky-blue","green","red","black","slate","turquoise"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateGroupTypeColorKeyPropEnum = append(updateGroupTypeColorKeyPropEnum, v)
	}
}

const (

	// UpdateGroupColorKeyBlue captures enum value "blue"
	UpdateGroupColorKeyBlue string = "blue"

	// UpdateGroupColorKeyPurple captures enum value "purple"
	UpdateGroupColorKeyPurple string = "purple"

	// UpdateGroupColorKeyMidnightDashBlue captures enum value "midnight-blue"
	UpdateGroupColorKeyMidnightDashBlue string = "midnight-blue"

	// UpdateGroupColorKeyOrange captures enum value "orange"
	UpdateGroupColorKeyOrange string = "orange"

	// UpdateGroupColorKeyYellowDashGreen captures enum value "yellow-green"
	UpdateGroupColorKeyYellowDashGreen string = "yellow-green"

	// UpdateGroupColorKeyBrass captures enum value "brass"
	UpdateGroupColorKeyBrass string = "brass"

	// UpdateGroupColorKeyGray captures enum value "gray"
	UpdateGroupColorKeyGray string = "gray"

	// UpdateGroupColorKeyFuchsia captures enum value "fuchsia"
	UpdateGroupColorKeyFuchsia string = "fuchsia"

	// UpdateGroupColorKeyYellow captures enum value "yellow"
	UpdateGroupColorKeyYellow string = "yellow"

	// UpdateGroupColorKeyPink captures enum value "pink"
	UpdateGroupColorKeyPink string = "pink"

	// UpdateGroupColorKeySkyDashBlue captures enum value "sky-blue"
	UpdateGroupColorKeySkyDashBlue string = "sky-blue"

	// UpdateGroupColorKeyGreen captures enum value "green"
	UpdateGroupColorKeyGreen string = "green"

	// UpdateGroupColorKeyRed captures enum value "red"
	UpdateGroupColorKeyRed string = "red"

	// UpdateGroupColorKeyBlack captures enum value "black"
	UpdateGroupColorKeyBlack string = "black"

	// UpdateGroupColorKeySlate captures enum value "slate"
	UpdateGroupColorKeySlate string = "slate"

	// UpdateGroupColorKeyTurquoise captures enum value "turquoise"
	UpdateGroupColorKeyTurquoise string = "turquoise"
)

// prop value enum
func (m *UpdateGroup) validateColorKeyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateGroupTypeColorKeyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateGroup) validateColorKey(formats strfmt.Registry) error {
	if swag.IsZero(m.ColorKey) { // not required
		return nil
	}

	// value enum
	if err := m.validateColorKeyEnum("color_key", "body", m.ColorKey); err != nil {
		return err
	}

	return nil
}

func (m *UpdateGroup) validateDisplayIconID(formats strfmt.Registry) error {
	if swag.IsZero(m.DisplayIconID) { // not required
		return nil
	}

	if err := validate.FormatOf("display_icon_id", "body", "uuid", m.DisplayIconID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateGroup) validateMemberIds(formats strfmt.Registry) error {
	if swag.IsZero(m.MemberIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("member_ids", "body", m.MemberIds); err != nil {
		return err
	}

	for i := 0; i < len(m.MemberIds); i++ {

		if err := validate.FormatOf("member_ids"+"."+strconv.Itoa(i), "body", "uuid", m.MemberIds[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *UpdateGroup) validateMentionName(formats strfmt.Registry) error {
	if swag.IsZero(m.MentionName) { // not required
		return nil
	}

	if err := validate.MinLength("mention_name", "body", m.MentionName, 1); err != nil {
		return err
	}

	return nil
}

func (m *UpdateGroup) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", m.Name, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update group based on context it is used
func (m *UpdateGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateGroup) UnmarshalBinary(b []byte) error {
	var res UpdateGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
