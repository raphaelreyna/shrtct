// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HistoryActionStoryUpdate An action representing a Story being updated.
//
// swagger:model HistoryActionStoryUpdate
type HistoryActionStoryUpdate struct {

	// The action of the entity referenced.
	// Required: true
	// Enum: [update]
	Action *string `json:"action"`

	// The application URL of the Story.
	// Required: true
	// Max Length: 2048
	// Pattern: ^https?://.+$
	AppURL *string `json:"app_url"`

	// changes
	Changes *HistoryChangesStory `json:"changes,omitempty"`

	// The type of entity referenced.
	// Required: true
	EntityType *string `json:"entity_type"`

	// The ID of the entity referenced.
	// Required: true
	ID *int64 `json:"id"`

	// The name of the Story.
	// Required: true
	Name *string `json:"name"`

	// The type of Story; either feature, bug, or chore.
	// Required: true
	// Enum: [feature chore bug]
	StoryType *string `json:"story_type"`
}

// Validate validates this history action story update
func (m *HistoryActionStoryUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoryType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var historyActionStoryUpdateTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["update"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		historyActionStoryUpdateTypeActionPropEnum = append(historyActionStoryUpdateTypeActionPropEnum, v)
	}
}

const (

	// HistoryActionStoryUpdateActionUpdate captures enum value "update"
	HistoryActionStoryUpdateActionUpdate string = "update"
)

// prop value enum
func (m *HistoryActionStoryUpdate) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, historyActionStoryUpdateTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HistoryActionStoryUpdate) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

func (m *HistoryActionStoryUpdate) validateAppURL(formats strfmt.Registry) error {

	if err := validate.Required("app_url", "body", m.AppURL); err != nil {
		return err
	}

	if err := validate.MaxLength("app_url", "body", *m.AppURL, 2048); err != nil {
		return err
	}

	if err := validate.Pattern("app_url", "body", *m.AppURL, `^https?://.+$`); err != nil {
		return err
	}

	return nil
}

func (m *HistoryActionStoryUpdate) validateChanges(formats strfmt.Registry) error {
	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	if m.Changes != nil {
		if err := m.Changes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("changes")
			}
			return err
		}
	}

	return nil
}

func (m *HistoryActionStoryUpdate) validateEntityType(formats strfmt.Registry) error {

	if err := validate.Required("entity_type", "body", m.EntityType); err != nil {
		return err
	}

	return nil
}

func (m *HistoryActionStoryUpdate) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *HistoryActionStoryUpdate) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var historyActionStoryUpdateTypeStoryTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["feature","chore","bug"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		historyActionStoryUpdateTypeStoryTypePropEnum = append(historyActionStoryUpdateTypeStoryTypePropEnum, v)
	}
}

const (

	// HistoryActionStoryUpdateStoryTypeFeature captures enum value "feature"
	HistoryActionStoryUpdateStoryTypeFeature string = "feature"

	// HistoryActionStoryUpdateStoryTypeChore captures enum value "chore"
	HistoryActionStoryUpdateStoryTypeChore string = "chore"

	// HistoryActionStoryUpdateStoryTypeBug captures enum value "bug"
	HistoryActionStoryUpdateStoryTypeBug string = "bug"
)

// prop value enum
func (m *HistoryActionStoryUpdate) validateStoryTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, historyActionStoryUpdateTypeStoryTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HistoryActionStoryUpdate) validateStoryType(formats strfmt.Registry) error {

	if err := validate.Required("story_type", "body", m.StoryType); err != nil {
		return err
	}

	// value enum
	if err := m.validateStoryTypeEnum("story_type", "body", *m.StoryType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this history action story update based on the context it is used
func (m *HistoryActionStoryUpdate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChanges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HistoryActionStoryUpdate) contextValidateChanges(ctx context.Context, formats strfmt.Registry) error {

	if m.Changes != nil {
		if err := m.Changes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("changes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HistoryActionStoryUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HistoryActionStoryUpdate) UnmarshalBinary(b []byte) error {
	var res HistoryActionStoryUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
