// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateEntityTemplate Request paramaters for creating an entirely new entity template.
//
// swagger:model CreateEntityTemplate
type CreateEntityTemplate struct {

	// The id of the user creating this template.
	// Format: uuid
	AuthorID strfmt.UUID `json:"author_id,omitempty"`

	// The name of the new entity template
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// story contents
	// Required: true
	StoryContents *CreateStoryContents `json:"story_contents"`
}

// Validate validates this create entity template
func (m *CreateEntityTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoryContents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateEntityTemplate) validateAuthorID(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthorID) { // not required
		return nil
	}

	if err := validate.FormatOf("author_id", "body", "uuid", m.AuthorID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateEntityTemplate) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	return nil
}

func (m *CreateEntityTemplate) validateStoryContents(formats strfmt.Registry) error {

	if err := validate.Required("story_contents", "body", m.StoryContents); err != nil {
		return err
	}

	if m.StoryContents != nil {
		if err := m.StoryContents.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("story_contents")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("story_contents")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create entity template based on the context it is used
func (m *CreateEntityTemplate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStoryContents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateEntityTemplate) contextValidateStoryContents(ctx context.Context, formats strfmt.Registry) error {

	if m.StoryContents != nil {
		if err := m.StoryContents.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("story_contents")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("story_contents")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateEntityTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateEntityTemplate) UnmarshalBinary(b []byte) error {
	var res CreateEntityTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
